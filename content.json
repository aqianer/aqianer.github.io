{"meta":{"title":"操小刀的漫游笔记","subtitle":"自信人生二百年","description":"A Cyber Garbage Blogger","author":"aqianer","url":"https://aqianer.github.io","root":"/"},"pages":[{"title":"“about”","date":"2024-10-19T07:09:39.000Z","updated":"2024-10-19T07:11:29.124Z","comments":true,"path":"about/index.html","permalink":"https://aqianer.github.io/about/index.html","excerpt":"","text":""},{"title":"archives","date":"2024-10-19T14:17:07.000Z","updated":"2024-10-19T14:17:07.836Z","comments":true,"path":"archives/index.html","permalink":"https://aqianer.github.io/archives/index.html","excerpt":"","text":""},{"title":"“categories”","date":"2024-10-19T07:06:07.000Z","updated":"2024-10-19T07:07:14.275Z","comments":true,"path":"categories/index.html","permalink":"https://aqianer.github.io/categories/index.html","excerpt":"","text":""},{"title":"friends","date":"2024-10-19T14:16:48.000Z","updated":"2024-10-19T14:16:48.081Z","comments":true,"path":"friends/index.html","permalink":"https://aqianer.github.io/friends/index.html","excerpt":"","text":""},{"title":"垃圾佬回收空间","date":"2024-11-20T16:34:35.901Z","updated":"2024-11-20T15:28:06.000Z","comments":true,"path":"explore/index.html","permalink":"https://aqianer.github.io/explore/index.html","excerpt":"","text":"O1 2024年的小目标：完成 Volantis 6.0 并发布上线 来自2025年的复盘：已《基本》实现目标 正常 44% KR1 重构 tag-plugins 和 wiki 系统 当 KR 进度为 100% 时，标签默认显示为 已完成当 KR 未设置进度时，默认为 0%当 O 未设置进度时，则显示所有 KR 进度平均值 已完成 100% KR2 完成主要页面设计稿 小提示1小提示2您可以在 _config.yml 文件中修改标签的颜色和文案您可以在 _config.yml 文件中增加任意的标签配置 延期 90% KR3 完成前置准备工作（如果你知道答案，请在留言区帮帮我！🥹） 在咸水和海滩之间找一亩地求出圆周率后15位找出宇宙的终极逻辑去地狱里走两步 未完成 -12% KR-4 开发、测试和发布 支持嵌套插入图片等其它简单组件 风险 0% 不带摘要的样式： https://xaoxuu.com/blog/20221029/https://xaoxuu.com/blog/20221029/ 带摘要的样式： https://xaoxuu.com/blog/20221029/https://xaoxuu.com/blog/20221029/"},{"title":"tags","date":"2024-10-19T14:30:38.000Z","updated":"2024-10-19T14:30:38.400Z","comments":true,"path":"tags/index.html","permalink":"https://aqianer.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"在Linux中安装应用记录-容器化部署","slug":"9","date":"2024-11-09T14:21:10.918Z","updated":"2024-11-10T15:36:15.159Z","comments":true,"path":"article/9/","permalink":"https://aqianer.github.io/article/9/","excerpt":"","text":"参考 1curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun 安装yum管理 1sudo apt-get install yum 可能会遇到 12345chenglin@chenglin-Lenovo-Legion-Y7000:/etc/apt$ sudo apt-get install yumReading package lists... DoneBuilding dependency tree... DoneReading state information... DoneE: Unable to locate package yum 需要去配置文件更换国内镜像源,注释掉之前的 12345deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty main universe restricted multiverse 保存以后，更新 1sudo apt-get update 如果遇到公钥的问题 执行 1sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 3B4FE6ACC0B21F32 再执行update 再安装yum 1sudo apt-get install yum 在安装docker之前，Ubuntu系统没有配置yum源，需要手动执行命令去配置仓库信息在&#x2F;etc&#x2F;yum&#x2F;repos.d&#x2F;目录下创建两个文件，fedora-163.repo和fedora-updates-163.repo。分别复制以下配置信息保存即可。 123456789101112131415161718192021222324252627282930[fedora] name=Fedora 17 - $basearch - 163.comfailovermethod=prioritybaseurl=http://mirrors.163.com/fedora/releases/17/Everything/$basearch/os/mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=fedora-17&amp;arch=$basearchenabled=1metadata_expire=7dgpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$basearch [fedora-debuginfo]name=Fedora 17 - $basearch - Debug - 163.comfailovermethod=prioritybaseurl=http://mirrors.163.com/fedora/releases/17/Everything/$basearch/debug/mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=fedora-debug-17&amp;arch=$basearchenabled=0metadata_expire=7d gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$basearch [fedora-source]name=Fedora 17 - Source - 163.comfailovermethod=prioritybaseurl=http://mirrors.163.com/fedora/releases/17/Everything/source/SRPMS/mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=fedora-source-17&amp;arch=$basearchenabled=0metadata_expire=7dgpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$basearch 1234567891011121314151617181920212223242526[updates]name=Fedora 17 - $basearch - Updates - 163.comfailovermethod=prioritybaseurl=http://mirrors.163.com/fedora/updates/17/$basearch/mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=updates-released-f17&amp;arch=$basearchenabled=1gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$basearch [updates-debuginfo]name=Fedora 17 - $basearch - Updates - Debug - 163.comfailovermethod=prioritybaseurl=http://mirrors.163.com/fedora/updates/17/$basearch/debug/mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=updates-released-debug-f17&amp;arch=$basearchenabled=0gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$basearch [updates-source]name=Fedora 17 - Updates Source - 163.comfailovermethod=prioritybaseurl=http://mirrors.163.com/fedora/updates/17/SRPMS/mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=updates-released-source-f17&amp;arch=$basearchenabled=0gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$basearch 注意点：vim中删除全部使用ggdG即可 如果遇到gpg 1sudo yum install -y yum-utils --nogpgcheck 双系统笔记本安装的Ubuntu系统出现 Ubuntu开机就卡在 &#x2F;dev&#x2F;nvme0n1p2: clean, xxxxx&#x2F;xxxxxxx files, xxxxxx&#x2F;xxxxxxxxx blocks，一直进入不了图形界面 似乎找到了解决方案进入tty终端模式 但是联想笔记本，使用客制化键盘以后使用 ctrl + alt + F1 ~ F7 均为无效","categories":[],"tags":[]},{"title":"由配置ssh公钥引起的加密算法疑问","slug":"8","date":"2024-10-23T14:06:53.077Z","updated":"2024-10-23T15:30:29.005Z","comments":true,"path":"article/8/","permalink":"https://aqianer.github.io/article/8/","excerpt":"公钥是内部开源代码托管平台识别您的用户身份的一种认证方式，通过公钥，您可以将本地git项目与内部开源代码托管平台建立联系， 然后您就可以很方便的将本地代码上传到内部开源代码托管平台或者将内部开源代码托管平台代码下载到本地了。 以下介绍生成公钥和管理公钥的方法。如果你是在windows系统下使用，需要先安装git的windows客户端，使用下列步骤完成公钥的添加。","text":"公钥是内部开源代码托管平台识别您的用户身份的一种认证方式，通过公钥，您可以将本地git项目与内部开源代码托管平台建立联系， 然后您就可以很方便的将本地代码上传到内部开源代码托管平台或者将内部开源代码托管平台代码下载到本地了。 以下介绍生成公钥和管理公钥的方法。如果你是在windows系统下使用，需要先安装git的windows客户端，使用下列步骤完成公钥的添加。 由配置ssh公钥引起的加密算法疑问 常见问题 本地连github出错“ssh: connect to host github.com port 22: Connection timed out”，如何解决？1.检查系统是否存在公钥 运行 Git Bash, 在弹出的终端中输入下面提示的代码： 123cd~/.ssh 如果提示：No such file or directory 说明你是第一次使用git需要生成公钥。如果不是第一次使用您可以选择使用已有公钥或者重新生成公钥方式。 2.备份并生成公钥 备份公钥（可选）： 1234567mkdirkey_backupcpid_ed25519*key_backuprmid_ed25519* 生成新公钥： 12345ssh-keygen-ted25519-C&quot;您的email&quot;ssh-keygen-trsa-C&quot;您的email&quot; 这里ed25519、rsa都是加密算法 在回车中会提示你输入一个密码，当输入密码时，私钥在用户本地是加密存储的；当不输入密码时，私钥在用户本地是明文存储的。这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入，但是为空可能存在安全风险，请谨慎选择。 公钥生成后您可以在你本机系统盘下，您的用户文件夹里发现一个.ssh文件，其中的id_ed25519.pub文件里储存的即为刚刚生成的ssh公钥。 3.复制公钥 方式1.使用下面命令显示公钥然后手工复制 123cat~/.ssh/id_ed25519.pub 注意：手工复制公钥时不要复制多余的空格，否则可能添加不成功。 方式2.使用命令直接复制公钥到剪贴板 Windows: 123clip&lt;~/.ssh/id_ed25519.pub Mac: 123pbcopy&lt;~/.ssh/id_ed25519.pub Linux (requires xclip): 123xclip-selclip&lt;~/.ssh/id_ed25519.pub 4.上传公钥 粘贴公钥到公钥栏中并创建","categories":[],"tags":[]},{"title":"Linux系统文件目录及指令录","slug":"3","date":"2024-10-22T13:48:08.583Z","updated":"2024-10-23T15:29:46.204Z","comments":true,"path":"article/3/","permalink":"https://aqianer.github.io/article/3/","excerpt":"开发人员经常用到的一些Linux命令","text":"开发人员经常用到的一些Linux命令 Linux+docker+k8s常用命令1 常用Linux命令1.11 Base64编码和解码1）base64编码源数据base64编码数据由数字+字母+等于号组成 2）base64编码echo “Welcome to Linux” | base64 &gt; encodedfile.txt 3）base64解码echo ‘dzRxx’| base64 -d &gt; aoto_key.dat 1.12 vim命令编辑文件1）常用操作哦 按 Esc进入命令模式 gg 让光标移到首行，在vim才有效，vi中无效 G 光标移到最后一行 单行复制：按esc键后, 然后yy 单行删除：按esc键后, 然后dd 粘贴：按esc键后, 然后p 行数设置：按esc键后，输入：set nu 1.13 Notepad++去掉空行1） 使用正则表达式删除空格行空格 替换中查找模式选择正则表达式^ +$，替换为空（就是什么都不填），再用上面的方法删除空行。 1.14 zip打包命令1）zip命令打包整个目录 zip -r notification_logs.zip notification-38381779-88fvgg notification-38381779-88fvgg是目录 2）zip命令进行解压缩文件 unzip + zip文件 1.15 tar命令1）tar命令进行压缩文件 tar -xzvf + 文件名 2）tar命令进行解压缩文件 tar -czvf aa.tar.gz aa 1.16 grep命令1）查找在当前路径下包含此字符串的文件 grep 字符串 -R * 1.17 查看具体进程的指标1）查看具体进程的指标 ps -ef |grep mock # 得到进程的PID，第二列就是PID top -H -p 1600,1601 # 可以查看具体进行的CPU和内存等使用信息 2）TOP命令可以直接看主机总体的性能指标 top 1.18 查看物理CPU的个数1）查看物理CPU的个数 cat &#x2F;proc&#x2F;cpuinfo | grep ‘physical id’| sort | uniq | wc -l 1.19 Linux命令-密码永不过期排查1）Linux命令-密码永不过期排查 egrep ^[^:]+:[^!] &#x2F;etc&#x2F;shadow 2&gt;&#x2F;dev&#x2F;null | awk -F: ‘(($4 &lt; 7)&amp;&amp;($2!~&#x2F;^[!]&#x2F;)) { print $1 }’ | sort egrep ^[^:]+:[^!] &#x2F;etc&#x2F;shadow 2&gt;&#x2F;dev&#x2F;null | awk -F: ‘(($5 &lt; 0 || $5 &gt; 365)&amp;&amp;($2!~&#x2F;^[!]&#x2F;)) { print $1 }’ | sort 1.20 find命令1）利用find命令批量替换IP地址等 find . -type f -name ‘*.cfg’ | xargs sed -i ‘s&#x2F;7.212.162.95&#x2F;7.212.194.92&#x2F;g’; find . -type f -name ‘*.xml’ | xargs sed -i ‘s&#x2F;7.212.162.95&#x2F;7.212.194.92&#x2F;g’ find . -type f -name ‘*.properties’ | xargs sed -i ‘s&#x2F;7.212.162.95&#x2F;7.212.194.92&#x2F;g’ find . -type f -name ‘*.ini’ | xargs sed -i ‘s&#x2F;7.212.162.95&#x2F;7.212.194.92&#x2F;g’ find . -type f -name ‘*.cshrc’ | xargs sed -i ‘s&#x2F;7.212.162.95&#x2F;7.212.194.92&#x2F;g’ find . -type f -name ‘*.wsdl’ | xargs sed -i ‘s&#x2F;7.212.162.95&#x2F;7.212.194.92&#x2F;g’ find . -type f -name ‘*.config’ | xargs sed -i ‘s&#x2F;7.212.162.95&#x2F;7.212.194.92&#x2F;g’ find . -type f -name ‘*.conf’ | xargs sed -i ‘s&#x2F;7.212.162.95&#x2F;7.212.194.92&#x2F;g’ find . -type f -name ‘*.cache’ | xargs sed -i ‘s&#x2F;7.212.162.95&#x2F;7.212.194.92&#x2F;g’ find . -type f -name ‘config.yaml’ | xargs sed -i ‘s&#x2F;7.212.195.38&#x2F;7.212.203.195&#x2F;g’ find . -type f -name ‘*’ | xargs sed -i ‘s&#x2F;7.212.162.95&#x2F;7.212.194.92&#x2F;g’; 2）find命令的常用手法：表示在当前目录下查找redis.yaml文件 find . -name ‘redis.yaml’ find .&#x2F; |xargs grep pwd.check.lenght 3）查找&#x2F;home&#x2F;linuxidc目录中以.log.gz结尾的所有文件，注意要用双引号引起来啊 find &#x2F;home&#x2F;linuxidc -type f -name ‘*.log.gz’ 4）输出到文件形式 find .&#x2F; |xargs grep ‘AutoInterestTask|’ |grep od_trans_record_20221118 &gt; tran_1118.txt 5）按照时间查找满足时间的文件 [bdi@kwephis1517404 ~&#x2F;logs]$ find . -mmin -20 .&#x2F;flow&#x2F;20230421&#x2F;CtrlFlow .&#x2F;flow&#x2F;20230421&#x2F;CtrlFlow&#x2F;CTRLFLOW16795353510514782 .&#x2F;flow&#x2F;20230421&#x2F;CtrlFlow&#x2F;CTRLFLOW16795353510514782&#x2F;PI_20694 .&#x2F;flow&#x2F;20230421&#x2F;CtrlFlow&#x2F;CTRLFLOW16795353510514782&#x2F;PI_20694&#x2F;H085.log.1 .&#x2F;flow&#x2F;20230421&#x2F;CtrlFlow&#x2F;CTRLFLOW16795353510514782&#x2F;PI_20694&#x2F;H080.log.1 .&#x2F;flow&#x2F;20230421&#x2F;CtrlFlow&#x2F;CTRLFLOW16795353510514782&#x2F;PI_20694&#x2F;H005.log.1 .&#x2F;flow&#x2F;20230421&#x2F;CtrlFlow&#x2F;CTRLFLOW16795353510514782&#x2F;PI_20694&#x2F;od_account_entry_20220322_20230323154631.unl .&#x2F;flow&#x2F;20230421&#x2F;CtrlFlow&#x2F;CTRLFLOW16795353510514782&#x2F;PI_20694&#x2F;H041.log.1 .&#x2F;flow&#x2F;20230421&#x2F;CtrlFlow&#x2F;CTRLFLOW16795353510514782&#x2F;PI_20694&#x2F;H091.log.1 .&#x2F;flow&#x2F;20230421&#x2F;CtrlFlow&#x2F;CTRLFLOW16795353510514782&#x2F;PI_20694&#x2F;H086.log.1 .&#x2F;stage_priority&#x2F;HDI_stage_priority.log .&#x2F;debug&#x2F;HDI_schedule_debug.log .&#x2F;debug&#x2F;ssoclient_debug.log .&#x2F;debug&#x2F;bpm_debug.log .&#x2F;debug&#x2F;others_debug.log .&#x2F;debug&#x2F;bme_debug.log .&#x2F;debug&#x2F;HDI_debug.log .&#x2F;jsch&#x2F;jsch_debug.log .&#x2F;ftp_pool&#x2F;ftp_pool.log .&#x2F;operation&#x2F;common_operation.log 1.21 查看进程命令1）netstat命令 netstat -anlp|grep 17310 2）ps命令 ps -aux|grep sia lsof查看进行状态 lsof -i:PID 1.22 tcpdump抓包命令1）如下命令只是查看交互信息，但是并未保存到文件 tcpdump -i eth0 port 6379 -vvv 2）常规抓包 tcpdump -i any -s0 -w intransaction.cap 根据网卡和源端口抓包 tcpdump -i lo port 6379 -vvv -w redis.cap 容器内抓包 先找到对应容器ID， docker ps |grep customerod 然后找到容器对应Java进程 docker inspect -f 容器ID 进入对应的namespace nsenter -n -t PID 查看进入namespace是否成功 Ifconfig 1.23 view命令1）基本操作 view + 文件 shif+小写G:跳到最后一页 shif+小写B shif+小写F 1.24 curl命令查看连接情况1）curl命令查看连接情况 curl -ikv -X post https://10.22.10.205:443/apiaccess 1.25 Linux后台执行Java语言写的jar包1）Linux后台执行Java语言写的jar包 java -jar lodas-0.0.1-SNAPSHOT.jar –server.port&#x3D;8085 &amp; 1.26 md5命令1）md5命令得到一串序列号，判断两个文件的序列号是否一致来判断是否为同一个文件 md5 sum Daily_Transaction_Detail_20221110.csv 1.27 命令简写1）命令简写 123456789101112131415161718192021222324252627282930313233343536373839404142434445vi ~/.bashrcsource~/.bashrc##### 1.28 crontab命令kwephis1736291:~# crontab -l# DO NOT EDIT THIS FILE - edit the master and reinstall.# (/tmp/crontab.eSeUyI installed on Tue Nov 15 18:03:18 2022)# (Cronie version 4.2)# DO NOT EDIT THIS FILE - edit the master and reinstall.# (/lodas/itpaas/script/install/crontab_file installed on Wed Aug 17 14:53:50 2022)# (Cronie version 4.2)*/2 **** /bin/bash /usr/local/his-matrixagent/scripts/monitor.sh &gt; /dev/null 2&gt;&amp;1 &amp;*/1****flock-xn/tmp/paas_monitor.lock-c&#x27;/var/monit/bin/crontab_monitor.sh &gt; /dev/null 2&gt;&amp;1&#x27;*/5 **** [ -f /root/core_binding/core_binding.sh ] &amp;&amp; /root/core_binding/core_binding.sh/root/core_binding/proc_cpu_layout.cfg&gt;/dev/null2&gt;&amp;1***** /etc/ssh/fs_start_monitor.sh &gt;/dev/null 2&gt;&amp;104***su-s/bin/bash-lodas-c&quot;\\$&#123;HOME&#125;/tools/clearfile.sh&quot;&gt;/dev/null2&gt;&amp;1*/120 **** su -s /bin/bash - sftpuser -c &quot;\\$&#123;HOME&#125;/tools/clearfile.sh&quot;&gt;/dev/null 2&gt;&amp;104***su-s/bin/bash-hda-c&quot;\\$&#123;HOME&#125;/tools/clearfile.sh&quot;&gt;/dev/null2&gt;&amp;104***su-s/bin/bash-bdi-c&quot;\\$&#123;HOME&#125;/tools/clearfile.sh&quot;&gt;/dev/null2&gt;&amp;1*/5 **** /bin/bash /usr/local/his-matrixagent/plugins/collectorkit/1.0.0/monitor.sh &gt; /dev/null 2&gt;&amp;1 &amp;kwephis1736291:~# crontab -ecrontab:nochangesmadetocrontabkwephis1736291:~# 1.29 ls命令1）ls命令查看Linux文件和目录，并按照时间排序 ls -ltr 1.30 查看Linux正在运行的进程1）查看Linux正在运行的进程 ps ux 1.31 scp命令1）scp命令进行迁移文件 scp 源文件 用户目录名@目标地址：~&#x2F;scripts 1.32 history命令1）history命令进行查看历史执行命令 history |grep Redis 1.33 scp命令1）scp命令进行迁移文件 scp 源文件 用户目录名@目标地址：~&#x2F;scripts 1.34 scp命令1）scp命令进行迁移文件 scp 源文件 用户目录名@目标地址：~&#x2F;scripts 1.35 grep -v 命令筛选东西1）scp命令进行迁移文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445dggphisprd15556:/var/log/applogs/ops/API_Access_in# ls |grep -v access-in-5986746b8c-vk727access-in-5986746b8c-fdtpcaccess-in-5986746b8c-srntvaccess-in-5b998c8c99-wsrdcaccess-in-5dd48c4c86-bntjqaccess-in-67cb4d6869-l24bpaccess-in-67cb4d6869-lt6hjaccess-in-6b888d658d-tkvtjaccess-in-6d45546d9-cwgq7access-in-75b94dc47-88frxaccess-in-75b94dc47-88m28access-in-75b94dc47-8x9rwaccess-in-75b94dc47-x9jhraccess-in-76484cc789-fvcc9access-in-768ffc9767-bfqm9access-in-768ffc9767-k5dx4access-in-768ffc9767-rq5nndggphisprd15556:/var/log/applogs/ops/API_Access_in# ls |grep -v access-in-5986746b8c-vk727|xargs rm -rfdggphisprd15556:/var/log/applogs/ops/API_Access_in# lltotal4drwxr-x---153301onip4096Feb2216:00access-in-5986746b8c-vk727dggphisprd15556:/var/log/applogs/ops/API_Access_in# 1.36 grep + 字符串 -rl *1）grep 字符串 -rl * :递归查找当前路径下的包含字符串的文件 grep 字符串 -rl * 1.37 grep + 字符串 -rl *1）grep 字符串 -rl * :递归查找当前路径下的包含字符串的文件 grep 字符串 -rl * 2 k8s常用命令2.11 修改镜像kubectl set image -n mpaas deployment&#x2F;auditlog auditlog&#x3D;10.243.198.39&#x2F;mpaas&#x2F;auditlog:21.1.0.202201131914.suse kubectl set image -n mpaas deployment&#x2F;mqgateway mqgateway&#x3D;10.243.198.39&#x2F;mpaas&#x2F;mqgateway:21.1.0.202201131914.suse kubectl set image -n mpaas deployment&#x2F;notification notification&#x3D;10.243.198.39&#x2F;mpaas&#x2F;notification:21.1.0.202201131914.suse kubectl set image -n mpaas deployment&#x2F;taskjob taskjob&#x3D;10.243.198.39&#x2F;mpaas&#x2F;taskjob:21.1.0.202201131914.suse kubectl set image -n mpaas deployment&#x2F;usercenter usercenter&#x3D;10.243.198.39&#x2F;mpaas&#x2F;usercenter:21.1.0.202201131914.suse kubectl set image -n mpaas deployment&#x2F;iam iam&#x3D;10.64.121.165:10050&#x2F;mpaas&#x2F;iam:21.1.0.202201131914.suse 2.12 查看服务启动日志和Foundation版本kubectl logs taskjob-89897c5b9-zwhcd -c taskjob -n mpaas 2.13 删除所有pod的命令podmpaas |awk ‘{printf} “%s” , $1’ |xargs kubectl delete pod -n mpaas kubectl delete pod -n mpaas –all 2.14 创建命名空间kubectl create namespace istio kubectl create namespace ops kubectl create namespace mpaas 2.15 删除命名空间kubectl delete namespace ops kubectl delete namespace mpaas 2.16 获取命名空间kubectl get namespace 2.17 获取secret使用dump&#x2F;load导出表后重新导入方法恢复 kubectl get secret -n kube-system 2.18 修改探针时间kubectl edit deployment.apps -n mpaas taskjob 2.19 取部署的服务kubectl get deployment –all-namespaces -o wide kubectl get pod -A kubectl get pod -o wide -n mpaas kubectl get svc –all-namespaces -o wide kubectl get pod –all-namespaces -o wide kubectl get node -n mpaas kubectl describe pod -n istio-system istiod-6777d48cdf-62qhk kubectl describe ep -n istio 2.20 修改超时时间kubectl describe vs customer-od -n mpaas kubectl logs -n istio kubectl get virtualservice -n mpaas 2.21 辑资源实例kubectl edit deployment auditlog -n mpaas kubectl edit configmap -n ops jetmqapp 2.22 进入容器kubectl exec -it 容器名 -n mpaas – &#x2F;bin&#x2F;bash 2.23 重启服务（删除对应服务实例，容器将会自动从镜像仓库中拉起对应的服务） kubectl get pod -n mpaas kubectl delete pods customerod-778b47b6dd-8qxkb -n mpaas 删除服务：kubectl delete namespace portal（删除后所有服务都会被删除 2.24 启动服务的命令kubectl apply -f auditog.yaml 2.25 删除服务命令kubectl delete -f audotlog.yaml 2.26 远程链接redis清理数据命令redis-cli -h 10.16.1.211 -a Password keys Over* del 2.27 后台部署服务helm template mpaas&#x2F; &gt;mpaas.yaml kubectl get service pod_name -n namespace_name -o yaml &gt;customerod.yaml 2.28 快速查看服务对应的镜像kubectl describe deploy customerod -n mpaas |grep Image 对应缩写：dpmpaas customerod |grep Image 2.29 查看endpointkubectl get ep -n mpaas 2.30 查看节点CPU资源kubectl describe node apaas-funtest-mid03 2.31 删除状态为Evicted的pod(当pod所在挂载目录的使用率超过80%还是75%,pod就会被驱逐) kubectl get pods -n mpaas |grep Evicted |awk ‘{print $1}’|xargs kubectl delete pod -n mpaas kubectl get pods -n ops|grep Evicted |awk ‘{print $1}’|xargs kubectl delete pod -n ops 强制删除pod 补上 –force –grace-period&#x3D;0 拯救措施 1）先清一下这个日志，减少磁盘空间 2）直接修改阈值，每个节点编辑如下文件，修改为10%代表阈值为90% &#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;config.yaml 修改完成之后重启一下kubelet systemctl restart kubelet 给节点打标签，这样，pod就能指定起服务在哪个节点上 kubectl get node –show-labels kubectl label node 节点IP zookeeper-node &#x3D; zookeeper kubectl label node 7.212.203.222 zookeeper-node&#x3D;zookeeper 等于号两边不能有空格 2.32 亲和性kubectl get deployments.apps -n mpaas apollo-config-server-pro-0 -o yaml |grep -i nodeAffinity -A 8 2.33 定位问题 kubectl describe pod apollo-config-server-pro-0-65fdf9549-ndg5h -n mpaas logmpaas taskjob-79bbbd6c84-vxs84 taskjob kubectl logs taskjob-79bbbd6c84-vxs84 -n mpaas -c taskjob（也可以不加-c) 2.34 查看镜像kubectl get deployment -n mpaas -o wide |awk ‘{printf “%-30s%-15s\\n”, $1,$7}’ 2.35 查看k8s版本命令1）kubectl get node # version列即k8s的版本 2）kubectl version 2.36 部署类型kubectl get daemonsets.apps -A zookeeper redis apigovernance部署类型是statefulset 2.37 打污点和删除污点命令1）打污点可以解决场景： 资源不够时，可以在资源不够的节点上去打污点，这样服务就不会选取资源不够的节点去起服务， 或是资源足够，但是也有需求去在指定节点上面起服务 2）操作：先在某个节点打一个污点，然后等服务在其他节点起来以后，再取消污点 3）打污点 kubectl taint nodes 7.220.105.150 app&#x3D;special-user:NoSchedule 4）删除污点 kubectl taint nodes 7.220.105.150 app- 5）查看某一节点是否打了污点 kubectl describe nodes 7.212.195.8 |grep Taints 2.38 查看 ReplicaSetkubectl get rs -n mpaas 清除某一个 ReplicaSet kubectl delete rs credit-68b57f4674 -n mpaas 2.39 查看kubelet日志journalctl -u kubelet -f 2.40 journalctl -u kubelet -f 3 k8s 冷知识 3.01 直接调用customerod的定时任务执行接口 1）手动调用定时任务和taskjob拉起定时任务的区别 http://7.212.203.222:31380/customer-od/v1/job_clients/execute 这个是customerod服务集成了 foundation里面的taskjob client 接口是属于customerod服务的 代码是属于foundation的 你这么调就是没经过taskjob了 http://10.62.142.133:31380/taskjob/v1/job_servers/job_insts/createjob‘ \\ 这个才是taskjob的接口 3.02 服务的access日志 1）xxx 为啥接出和接入都会有in 和 out 两个请求 in记录的是请求进来 out记录的是请求响应的时间点 INBOUND代表的是 其他服务调用打印日志这个服务 OUTBOUND代表打印日志这个服务 调用其他服务 3.03 查看命名空间pod有个指标READY解读 1） xxx 这个2&#x2F;2指的是pod 有两个容器 一个是应用容器 一个是istio-proxy容器，这个是服务创建一次性委托任务的接口 3.04 kube-proxy和istio-proxy是不是一个东西 1）xxx kube-proxy是 Linux的一个后台服务 istio-proxy是一个container容器 istio-proxy就是这个sidecar ingress 对应 proxy discovery对应pilot 2）k8s的组件istio_proxy和服务里面的容器 istio_proxy不是一个东西 每个服务都有一个单独的istio-proxy istio-ingressgateway 容器名字也叫 istio-proxy，但是职责应该是不一样的 3.05 customerod的服务无法容器内重启，只能执行kubectl delete pod来重启pod 1）xxx fabric的服务可以进入容器内re重启 因为fabric做得挫 把op的网元直接放到容器里面就叫容器化了 fabric那叫半容器化，他做的东西还是跟mm的非容器化的网元差不多，只不过把网元放在了容器里 customerod容器就是服务，重启服务就是重启容器34 不会把容器和服务拆分开来使用 3.06 istio-od的作用 1）xxx istio的数据中心吧 ingress是暴露端口給外面，签发证书之类的用处 3.07 登录zk 1）xxx .&#x2F;hwZkCli.sh -server zookeeper-1.zookeeper-headless.ops.svc .&#x2F;hwZkCli.sh -server zookeeper-1.zookeeper-headless.ops:2181 zk客户端登录： 进入zk对应的pod 进入目录：cd /home/zookeeper/zookeeper/app/zookeeper/bin 连接：./hwZkCli.sh -server localhost:2181 zk有服务发现注册的能力，但是我们没用 zk的服务发现对于代码是侵入式的 k8s则是无侵入式的 可以通过参数配置来寻找其他服务，不需要改动代码 侵入就是 为了用这个组件，我们不得不在代码里面引入对应的软件包，并做适配性的改造 zk在我们项目目前只有taskjob和缓存同步中会用到 2）TOP命令可以直接看主机总体的性能指标 top 3.08 XMS和XMX 1）xxx xms:JVM初始分配的大小 XMX：JVM最大允许分配的堆内存，按需分配 3.09 xxx 1）xxx xxx 4 Docker相关操作命令 4.11 平时常用 1）进入容器命令 docker exec -it + 容器ID &#x2F;bin&#x2F;bash 2）查看命名空间下的镜像 docker ps |grep istio 3）查看镜像 docker images 4）删除镜像 docker rmi 5）查看当前部署的服务的所有镜像 .&#x2F;main images 6）启动docker容器 docker run –name [CONTAINER_NAME] [CONTAINER_ID] 7）查看容器运行状态 docker ps -a 8））查看进程并展示头部信息 ps -ef|head 9）操作修改容器进程状态 docker run –name [CONTAINER_NAME] [CONTAINER_ID] 10）容器进程被杀死 docker ps |grep docker_name docker exec -it docker_id bash top kill -STOP &lt;pid&gt; jobs查看挂起的进程 11）容器内抓包 docker inspect -f pid 这个命令获取pid nsenter -n -t &lt;pid&gt; 再通过这个命令进容器的namespace 12）容器的基本操作 docker ps -a 查看所有容器 docker run -it –name&#x3D;容器名 images 创建并运行容器 docker exec -it 容器id&#x2F;容器名 &#x2F;bin&#x2F;bash 访问容器 docker start&#x2F;stop&#x2F;restart&#x2F;rm 容器id&#x2F;容器名 启、停、删除容器 docker logs -f -t –tail 数字n 容器id 查看容器日志 13）容器网络操作 docker network ls 查看所有容器网络 docker network create -d overlay –subnet&#x3D;172.20.1.1&#x2F;16 网络名称 创建容器网络 docker network connect 网络名称 容器id&#x2F;容器名 容器添加其他网络 docker network inspect 容器id&#x2F;容器名 查看某个具体的容器网络详细信息 docker network rm 容器id&#x2F;容器名 删除容器网络 14）容器镜像操作 docker image ls 查看所有镜像 docker commit testimg test&#x2F;cloudsop:v2 创建镜像 docker save 镜像名 -o &#x2F;root&#x2F;dockerfile&#x2F;my.tar 保存镜像 cat suse 12sp2.tar | docker import - suse12sp2 导入镜像 docker image pull&#x2F;push 镜像名[:tag] 推拉镜像 docker rmi 镜像id 删除镜像 13）主机与Docker容器间文件传输 主机发文件给Docker容器 docker cp 主机文件路径 Docker容器ID全称:Docker路径 docker cp &#x2F;home&#x2F;paas&#x2F;test.txt f2fcc50fd622196938e4839d0c96eb30276e53c5cbb136c95d7a24f5028ee93a:&#x2F;home&#x2F;paas&#x2F; 14）Docker容器上传文件给主机（在主机端执行） docker cp Docker容器ID全称:Docker路径 主机路径 docker cp f2fcc50fd622196938e4839d0c96eb30276e53c5cbb136c95d7a24f5028ee93a:&#x2F;home&#x2F;paas&#x2F;testBack.txt &#x2F;home&#x2F;paas&#x2F; 15）主机与Docker容器间共享一块Volume 类似共享文件夹，docker启动时挂载到容器，则主机与容器都可访问 docker volume create ShareDir &#x2F;&#x2F;在主机创建一个名为”ShareDir”的Volume docker volume inspect ShareDir &#x2F;&#x2F;查询主机中该Volume的路径 docker run -it –name 容器名 -v ShareDir:&#x2F;MyShareDir nginx &#x2F;bin&#x2F;bash &#x2F;&#x2F;启动一个容器时挂载”ShareDir”到该容器中的”&#x2F;MyShareDir”目录下。 16）其他 1、容器退出后，通过docker ps命令查看不到，数据会丢失么？ 容器退出后会处于终止(exited)状态，此时可以能过docker ps -a 命令查看。其中的数据也不会丢失，还可以通过docker start命令来启动它。只有删除掉容器才会清除所有数据。 2、如何停止所有正地运行的容器？ docker kill $(docker ps -q) 3、如何清理批量后台停止的容器？ docker rm -f $(docker ps -qa) 4、如何获取某个容器的PID信息？ docker inspect –format ‘ .State.Pid ‘ 5、如何获取某个容器的IP地址? dpcler inspect –format ‘ &gt;NetworkSettings.IPAddress ‘ 6、如何给容器指定一个固定IP地址，而不是每次重启容器IP地址都会变？ 目前Docker并没有提供直接的对容器IP地址的管理支持，可以在网上查找容器网络配置创建点对点连接的案例，来手动配置容器的静态IP。或者在容器启动后，再手动进行修改。 7、如何临时退出一个正在交互的容器的终端，而不终止它？ 按Ctrl-p Ctrl-q。如果按Ctil-c往往会让容器内应用进程终止，进而会终止容器。 8、使用docker port 命令映射容器的时，系统报错“Error: No Public port ‘80’ published for xxx” ,怎么办？ 创建镜像时Dockerifle要通过EXPOSE命令指定正确的开放端口；容器启动时指定PublishAllPort&#x3D;true。 9、可以在一个容器中同进运行多个应用进程么？ 一般并不推荐在同一个容器内运行多个应用进程。如果有需求，可以通过一些额外的进程管理机制，比如supervisord来管理所运行的进程。可以参考https://docs.docker.com/articles/using_supervisord/ 10、如何控制容器占用系统资源(CPU MEM)的份额？ 在使用docker create命令创建容器或使用docker run创建并启动容器的时候，可以使用-c | –cpu-shares[&#x3D;0] 参数来调整容器使用CPU的权重；使用 -m | –memory[&#x3D;MEMORY]参数来调整容器使用内存的大小","categories":[],"tags":[]},{"title":"装机实践记录、电脑双系统的安装实践记录","slug":"7","date":"2024-10-22T13:38:28.725Z","updated":"2024-11-13T16:45:07.755Z","comments":true,"path":"article/7/","permalink":"https://aqianer.github.io/article/7/","excerpt":"","text":"起初成功安装了windows 11 + Ubuntu 20.04 双系统，然后在一次更新中Ubuntu系统的系统文件损坏一直无法加载进图形化界面，显示的是 如下问题 【ubuntu】开机一直“&#x2F;dev&#x2F;sda3:clean, XXX files, XXXX blocks” 都是说英伟达独立显卡驱动的问题，本可以尝试进入tty终端操作下，但是电脑使用各种方法也都没能进入到终端。 选择recovery mode 也是执行一会儿就卡在了莫名的地方，懒得折腾重装得了 教程都是在B站上找的，现在随便记录下几个步骤 1/4：准备Ubuntu系统镜像下载Ubuntu系统镜像2/4：准备安装镜像工具下载安装镜像工具3/4：制作Ubuntu安装盘制作Ubuntu安装盘4/4：准备磁盘分区 由于在之前安装过Ubuntu了，现在就只需要 win + x 进磁盘管理图形化页面 清楚磁盘分区就行，Ubuntu的系统盘删不掉的话就去命令行删除","categories":[],"tags":[]},{"title":"公司业务系统分析","slug":"6","date":"2024-10-22T13:35:41.900Z","updated":"2024-11-09T14:17:18.545Z","comments":true,"path":"article/6/","permalink":"https://aqianer.github.io/article/6/","excerpt":"","text":"金融类业务 移动支付 异地转账 国际汇款 客户（个人 组织） 银行 运营商 政府https://support.huawei.com/carrier/docview!docview?nid=DOC1000146231&amp;path=PBI1-7275733/PBI1-7275767/PBI1-7275870/PBI1-19893795/PBI1-7192048/PBI1-7301343/PBI1-21405370 典型组网DMZ zone：SLB、SFTP ServerAPP zone：Portal、AG（）、TC、NC、IC、BC、UMC、SR（注册中心）、MQData zone: Database(Live DB、Short-term DB、Long-term DB、Report DB) 功能架构Mobile Money系统功能视图主要包括Infrastructure Services: MQ\\workflow\\monitor\\schedulerBack-End Application:business configration etc.Business Services: FSI business\\Online payment\\E-Top up\\airtime\\Utility Bill payment\\B2C payment\\G2C payment\\IMT business\\Treasury accountingInbound Channel: Web\\USSD\\STK\\APP\\POS\\ATM等Enterprise Integration等模块。 各网元介绍MM系统业务介绍（基线+定制）主营业务两大类Transaction相关（如转账、充值、支付账单等）核心订单框架what kind of 业务类型（BO or TC）? graph TD subgraph four [\"Who\"] Identitiy style Identitiy fill:#74b205,stroke:red,color:#fff,stroke-dasharray: 2 2 end subgraph one [\"What\"] Product[\"fa:fa-cogs Product\"] Service[\"fa:fa-graduation-cap Service\"] Transaction[\"fa:fa-cogs Transaction Type\"] Product & Service & Transaction style Product fill:#ff9a37,stroke:red,color:#fff,stroke-dasharray: 2 2 style Service fill:#ff9a37,stroke:red,color:#fff,stroke-dasharray: 2 2 style Transaction fill:#ff9a37,stroke:red,color:#fff,stroke-dasharray: 2 2 end subgraph two [\"How\"] RuleProfile resontype accounttype Notification RuleProfile & resontype & accounttype style RuleProfile fill:#2e98d8,stroke:red,color:#fff,stroke-dasharray: 2 2 style resontype fill:#2e98d8,stroke:red,color:#fff,stroke-dasharray: 2 2 style accounttype fill:#2e98d8,stroke:red,color:#fff,stroke-dasharray: 2 2 style Notification fill:#2e98d8,stroke:red,color:#fff,stroke-dasharray: 2 2 end subgraph three [\"How Much\"] ChargeProfile ChargeType style ChargeProfile fill:#03aeab,stroke:red,color:#fff,stroke-dasharray: 2 2 style ChargeType fill:#03aeab,stroke:red,color:#fff,stroke-dasharray: 2 2 end Identitiy --> Product --> Service --> resontype --> accounttype Identitiy --> ChargeProfile --> resontype --> ChargeType Identitiy --> RuleProfile --> resontype --> Transaction RuleProfile --> accounttype resontype --> Notification 是交易？Who was involved in？（org | cousomer | SP）交易如何完成？（发起渠道channel | &lt;span style=&quot;background-color:rgb(253,216,53)&quot;&gt;交易场景 | 交易模型 | 账户类型 | 限制规则 | 通知）交易计费（charge type）–佣金计费税手续费 常使用的工具（用到的技术）K8S和dockersoap协议与rpc协议和http协议网元（微服务）基于tomcat和ebus以及CIT（渠道交互）实现的业务网关app -&gt; 内置小程序接入MM后台数据库 https://blog.csdn.net/Tuing_/article/details/129875279 sequenceDiagram participant A as 接入方 participant B as accessAdapter participant C as 消息模板 participant D as 服务路由 participant E as serviceAdapter participant G as 服务网元 participant F as 性能监控 A ->> B : 请求消息 activate B B ->> B : 消息规整 B -->>+ C : 参数映射 C -->>- B : 映射响应 B ->> B : 请求预处理 B ->>+ D : 查找目标服务 D ->>- B : 路由消息响应 B ->> E : 服务调用 E ->>+ G : 服务调用 G ->> G : 业务处理 G ->>- B : 业务响应 B -->> B : 请求后处理 B -->> F : 更新统计数据 B ->> A : 响应消息 deactivate B MM Finance(Finance Saas Management System) 报表 bulk 任务 为了提高系统业务处理和管理操作效率，CPS系统中需要提供一些批量的操作(批量创建实体、修改实体kyc等)。另一方面，在业务上CPS需要提供批量支付的能力（如：发放工资）。为了避免批量操作和支付对实时操作和实时交易的影响，系统需要提供对批量任务执行管理的能力，包括对批量任务计划的管理和批量任务执行的流量控制、以及批量任务的进度监控。所有批量操作通过一个Bulk Center的节点进行控制。 可以简单的理解成把bulk模板中的每条数据按设定的TPS调用bcs服务，完成批量任务。 以上篇介绍菲律宾SmartEVC批量管理Bundle黑白名单为例，Bulk定制开发主要为: sequenceDiagram participant Operator participant Portal participant BulkCenter participant SFTP Server participant Identity Center activate Operator Operator -&gt;&gt; Portal : upload Bulk File Portal -&gt;&gt;+ BulkCenter : getUploadPath() Portal -&gt;&gt;+ SFTP Server : upload原始任务文件 Portal -&gt;&gt;+ BulkCenter : loaddata() BulkCenter -&gt;&gt; SFTP Server : get任务文件 BulkCenter -&gt;&gt;- BulkCenter : 解析校验存储文件数据 deactivate Operator activate Operator Operator -&gt;&gt;+ Portal : 选择time slot Portal -&gt;&gt;+ BulkCenter : create task plan BulkCenter -&gt;&gt;- BulkCenter : 时间调度执行任务&lt;/pre&gt; CPS_BC_TASKTYPE_CV表数据预置以及模板文件预置123456789101112131415-- 供参考的sql语句，这里只解析几个重要的字段，其它的参考数据模型 见附件-- TYPE_NAME: BulkTaskType的唯一标识-- TASK_GROUP：bulk就表示为bulk任务-- TYPE_DESCRIPTION：portal界面显示的bulk名字-- TYPE_PARAMETER：模板格式-- IS_ASYNC：异步必须为 1-- CHECK_EXECUTOR 下面定义checker的beanid（详细见2、文件上传校验）-- CONVERTOR_EXECUTOR 下面定义convertor的beanid（详细见3、内容的解析、请求的封装、接口的调用）DELETE FROM CPS_BC_TASKTYPE_CV WHERE TYPE_NAME = &#x27;BULK_INQUIRY_FOR_ORGANIZATION_INFO_AND_KYC&#x27;;INSERT INTO CPS_BC_TASKTYPE_CV (TYPE_NAME, TASK_GROUP, NET_TYPE, TYPE_DESCRIPTION, AUTH_TYPE, TASK_EXECUTOR,TYPE_PARAMETER, BULK_TYPE_CATEGORY, DO_ALL_CLUSTER_NODES, BULK_EXECUTOR, IS_BULK, CONDITION, REPEAT_MODE, TEMPLATE_ROOT_ELEMENT, FEATURE_CODE, IS_ASYNC,CHECK_EXECUTOR, CONVERTOR_EXECUTOR, BACKEND_TYPE, EMBEDDED_PROPERTIES)VALUES (&#x27;BULK_INQUIRY_FOR_ORGANIZATION_INFO_AND_KYC&#x27;, &#x27;BULK&#x27;, &#x27;BCS&#x27;, &#x27;Bulk Inquiry for Organization info and KYC&#x27;, &#x27;SP_OPERATOR&#x27;,null, &#x27;&#123;&quot;FILEFORMAT&quot;:&quot;CSV&quot;&#125;&#x27;, null, null, null, null, null, null, null, null, &#x27;1&#x27;,&#x27;smartQueryBizOrgInfoChecker&#x27;, &#x27;smartQueryBizOrgInfoConverter&#x27;, &#x27;01&#x27;, null);一般模板格式：csv、xml、excel(xls,xlsx) 在数据库中预制以后，会在Portal页面bulk type中新增一个bulk任务 csv文件放在resources\\uconfig\\batch-template目录模板名字要与CPS_BC_TASKTYPE_CV表中的TYPE_NAME字段一致，如：BULK_INQUIRY_FOR_ORGANIZATION_INFO_AND_KYC.csv 模板不只是支持csv这种excel表格，还支持xmlcsv和xml的差异点主要是在取数据上面（见2、文件上传校验代码部分），csv文件主要是通过第几列决定是哪个参数，xml主要通过父子节点去关联，其他实现的基本思路是一致的。Xml模板 文件上传校验 在新增bulk定时任务时，上传csv文件（或者xml）触发后台校验选择好bulk type和file，点击上传文件的过程中校验文件中每条数据是否符合规则 定制checker(bean定义、类的定义）唯一性校验和界面条目展示处理 resources/spring/cv/xxx-xx-xxx-cv.xml1234567891011121314&lt;bean id=&quot;BulkModifyChargeDiscountConvertor&quot; class=&quot;com.huawei.bc.bulk.cardinjection.convertor.BulkModifyChargeDiscountConvertor&quot; /&gt; &lt;bean id=&quot;BulkModifyChargeDiscountChecker&quot; class=&quot;com.huawei.bc.bulk.cardinjection.check.BulkModifyChargeDiscountChecker&quot;&gt; &lt;!-- 校验模型ID 用于校验文件中的字段--&gt; &lt;property name=&quot;modelId&quot; value=&quot;BulkModifyChargeDiscount&quot; /&gt; &lt;!-- 指定用文本的校验器 --&gt; &lt;!--csv格式：DefaultCsvBatchValidator，xml格式：DefaultXmlBatchValidator--&gt; &lt;property name=&quot;batchValidator&quot;&gt; &lt;ref bean=&quot;DefaultCsvBatchValidator&quot; /&gt; &lt;/property&gt; &lt;/bean&gt; 校验类 BusinessChecker.java12345public abstract String getSummary(Object var1);public abstract Map&lt;String, String&gt; getUniqueIdMap(BulkData var1); 类定义，必须继承BusinessChecker，并实现getSummary()和getUniqueIdMap()方法一般放在com.huawei.payment.bts.局点名.bulk.xx业务.checker 下 com.huawei.bc.bulk.cardinjection.check/BulkModifyChargeDiscountChecker12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455/*构造summary信息,也就是上传bulk文件后的summary信息*/@Override public String getSummary(Object content) &#123; logger.enterFunction(content); if (content == null) &#123; logger.exitFunction(); return EMPTY; &#125; List&lt;String&gt; dataFieldsList = TxtFieldsUtils.formatInputData(content.toString()); if (CollectionUtils.isEmpty(dataFieldsList)) &#123; logger.exitFunction(); return EMPTY; &#125; final String ChargeProfileName = dataFieldsList.get(0); final String DiscountRule = dataFieldsList.get(1); final String Priority = dataFieldsList.get(2); final String EffectiveStart = dataFieldsList.get(3); final String EffectiveEnd = dataFieldsList.get(4);// final String DiscountMode = dataFieldsList.get(5); final String Value = dataFieldsList.get(5); final String OperationType = dataFieldsList.get(6); StringBuilder stringBuilder = new StringBuilder(&quot;ChargeProfileName:&quot;) .append(ChargeProfileName) .append(&quot;;&quot;) .append(&quot;DiscountRule&quot;) .append(DiscountRule) .append(&quot;;&quot;) .append(&quot;Priority&quot;) .append(Priority) .append(&quot;;&quot;) .append(&quot;EffectiveStart&quot;) .append(EffectiveStart) .append(&quot;;&quot;) .append(&quot;EffectiveEnd&quot;) .append(EffectiveEnd) .append(&quot;;&quot;) .append(&quot;Value&quot;) .append(Value) .append(&quot;;&quot;) .append(&quot;OperationType&quot;) .append(OperationType); logger.exitFunction(); return stringBuilder.toString(); &#125; 用一个xml文件校验csv模板的格式 uconfig/filemodel/bs.indosat.ModifyChargeDiscount.filemodel.xml12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;models&gt; &lt;!-- Bulk Modify Charge Discount--&gt; &lt;model name=&quot;BulkModifyChargeDiscount&quot; id=&quot;BulkModifyChargeDiscount&quot; separator=&quot;,&quot; type=&quot;csv&quot;&gt; &lt;!-- 客户节点 --&gt; &lt;format id=&quot;BulkModifyChargeDiscount&quot; fieldnum=&quot;8&quot;&gt; &lt;field id=&quot;ChargeProfileName&quot; index=&quot;0&quot;&gt; &lt;validator type=&quot;required&quot; &gt; &lt;param name=&quot;allowBlank&quot; value=&quot;false&quot; /&gt; &lt;/validator&gt; &lt;validator type=&quot;String&quot; /&gt; &lt;/field&gt; &lt;field id=&quot;DiscountRule&quot; index=&quot;1&quot;&gt; &lt;validator type=&quot;required&quot; &gt; &lt;param name=&quot;allowBlank&quot; value=&quot;true&quot; /&gt; &lt;/validator&gt; &lt;validator type=&quot;String&quot; /&gt; &lt;/field&gt; &lt;field id=&quot;Priority&quot; index=&quot;2&quot;&gt; &lt;validator type=&quot;required&quot; &gt; &lt;param name=&quot;allowBlank&quot; value=&quot;false&quot; /&gt; &lt;/validator&gt; &lt;validator type=&quot;String&quot; /&gt; &lt;/field&gt; &lt;field id=&quot;EffectiveStart&quot; index=&quot;3&quot;&gt; &lt;validator type=&quot;required&quot; &gt; &lt;param name=&quot;allowBlank&quot; value=&quot;true&quot; /&gt; &lt;/validator&gt; &lt;validator type=&quot;String&quot; /&gt; &lt;/field&gt; &lt;field id=&quot;EffectiveEnd&quot; index=&quot;4&quot;&gt; &lt;validator type=&quot;required&quot; &gt; &lt;param name=&quot;allowBlank&quot; value=&quot;true&quot; /&gt; &lt;/validator&gt; &lt;validator type=&quot;String&quot; /&gt; &lt;/field&gt;&lt;!-- &lt;field id=&quot;DiscountMode&quot; index=&quot;5&quot;&gt;--&gt;&lt;!-- &lt;validator type=&quot;required&quot; &gt;--&gt;&lt;!-- &lt;param name=&quot;allowBlank&quot; value=&quot;true&quot; /&gt;--&gt;&lt;!-- &lt;/validator&gt;--&gt;&lt;!-- &lt;validator type=&quot;String&quot; /&gt;--&gt;&lt;!-- &lt;/field&gt;--&gt; &lt;field id=&quot;Value&quot; index=&quot;5&quot;&gt; &lt;validator type=&quot;required&quot; &gt; &lt;param name=&quot;allowBlank&quot; value=&quot;true&quot; /&gt; &lt;/validator&gt; &lt;validator type=&quot;Number&quot; /&gt; &lt;/field&gt; &lt;field id=&quot;OperationType&quot; index=&quot;6&quot;&gt; &lt;validator type=&quot;required&quot; &gt; &lt;param name=&quot;allowBlank&quot; value=&quot;true&quot; /&gt; &lt;/validator&gt; &lt;validator type=&quot;String&quot; /&gt; &lt;/field&gt; &lt;/format&gt; &lt;/model&gt;&lt;/models&gt; 注意：有的bulk任务需要bcs业务进行校验（和identity相关的数据字段），就需要自定义校验器 举例子说明下： uconfig/filemodel/xxx.xml1234567891011121314151617181920&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;models&gt; &lt;model name=&quot;smartQueryBizOrgInfo&quot; id=&quot;smartQueryBizOrgInfo&quot; separator=&quot;,&quot; type=&quot;csv&quot;&gt; &lt;format id=&quot;smartQueryBizOrgInfo&quot; fieldnum=&quot;1&quot;&gt; &lt;field id=&quot;ShortCode&quot; index=&quot;0&quot;&gt; &lt;!--使用系统内置校验，required,choice等--&gt; &lt;validator type=&quot;required&quot;&gt; &lt;param name=&quot;allowBlank&quot; value=&quot;false&quot; /&gt; &lt;/validator&gt; &lt;validator type=&quot;choice&quot;&gt; &lt;param name=&quot;choice&quot; value=&quot;10,11,20,12,15,21,14,16,18&quot; /&gt; &lt;/validator&gt; &lt;!--使用自定义校验，需要自己定义校验器--&gt; &lt;validator type=&quot;shortCodeFormat&quot; /&gt; &lt;/field&gt; &lt;/format&gt; &lt;/model&gt;&lt;/models&gt; shortcode是组织唯一标识，因此在批量任务时要进行特殊校验 自定义校验类的bean定义 id与validator type&#x3D;”shortCodeFormat”对应，后面加_FIELDVALIDATOR ，放resources&#x2F;spring&#x2F;cv&#x2F;xxx-xx-xxx-cv.xml里面注入一个bean resources/spring/cv/xxx-xx-xxx-cv.xml1&lt;bean id=&quot;SHORTCODEFORMAT_FIELDVALIDATOR&quot; class=&quot;com.huawei.payment.bts.eload.bulk.smartquerybizorginfo.validator.ShortCodeFormatFieldValidator&quot;/&gt; 12345678910111213141516171819202122232425262728293031323334import com.huawei.payment.bc.util.validator.FieldValidator;/*** [自定义校验类,必需实现FieldValidator接口]* 一般放在com.huawei.payment.bts.局点名.bulk.xxx业务.validator 下** @author hWX823047* @version [版本号, 2020/5/20 9:50]* @see [相关类/方法]* @since [产品/模块版本]*/public class ShortCodeFormatFieldValidator implements FieldValidator &#123; /** * 校验参数 * * @param fileModel fileModel * @param idInfo idInfo * @param validatorInfo fileModel中的: param name=&quot;allowZero&quot; value=&quot;false&quot; * @param value 被校验的值，与filemodel中field 的id值关联 */ @Override public void validate(FileModel fileModel, IdInfo idInfo, ValidatorInfo validatorInfo, Object value) &#123; // 自定义校验逻辑，校验字段，一般做一些非业务的校验，如格式 // 从数据字典、系统参数获取规则// 注意：如需通过数据库数据校验参数，由于BTS包中无法直接查询原子服务，需要通过RPC调用的方式通过bcs已有服务查询数据。 &#125; @Override public void validateRelation(FileModel fileModel, IdInfo idInfo, ValidatorInfo validatorInfo, Object o, Object[] objects) &#123;// 校验关联关系，一般用不到，不用管 &#125;&#125; 文件内容解析、请求封装、接口调用 该步可以理解为组装单个调用服务所需参数，和组装RPC调用参数类似 定制converter，注入到容器中 1&lt;bean id=&quot;smartQueryBizOrgInfoConverter&quot; class=&quot;com.huawei.payment.bts.eload.bulk.smartquerybizorginfo.convertor.SmartQueryBizOrgInfoConverter&quot;/&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258/* * Copyright (c) Huawei Technologies Co., Ltd. 2012-2020. All rights reserved. */package com.huawei.bc.bulk.cardinjection.convertor;import com.huawei.bc.bulk.cardinjection.context.VoucherCardInjectionConstans;import com.huawei.payment.bc.ConvertorConstants;import com.huawei.payment.bc.management.task.Task;import com.huawei.payment.bc.management.task.TaskPlan;import com.huawei.payment.bc.management.task.TaskPlanParameter;import com.huawei.payment.bc.management.taskdata.BulkData;import com.huawei.payment.bc.process.bulk.convertor.BatchConvertor;import com.huawei.payment.bc.util.TxtFieldsUtils;import com.huawei.payment.bc.utils.SystemParamUtils;import com.huawei.payment.common.log.CPSLogger;import com.huawei.payment.common.util.CastUtil;import com.huawei.payment.domain.bo.common.TransactionEnv.InputNumberType;import com.huawei.payment.domain.bo.identity.IdentityType;import com.huawei.payment.message.Message;import com.huawei.payment.message.MessageList;import com.huawei.payment.remote.Param;import com.huawei.payment.remote.Parameter;import com.huawei.payment.remote.RequestHeader;import org.apache.commons.lang3.StringUtils;import java.util.List;/** * &lt;一句话功能简述&gt; * &lt;功能详细描述&gt; * * @author [作者] * @version [版本号, 时间] * @see [相关类/方法] * @since [产品/模块版本] */public class BulkModifyChargeDiscountConvertor extends BatchConvertor &#123; /** * debug日志对象 */ private static final CPSLogger logger = new CPSLogger(BulkModifyChargeDiscountConvertor.class); /** * BULK_MODIFY_CHARGE_DISCOUNT */ protected static final String BULK_MODIFY_CHARGE_DISCOUNT = &quot;ModifyDiscountRuleByCode&quot;; /** * 调用的接口，返回要调用的接口的commandId，这个一般都会定义在bcs端的 * resources\\conf\\xxx.xxx.xxx.app-def.xml的action中 * * @return commandId */ @Override public String getCommandId() &#123; return BULK_MODIFY_CHARGE_DISCOUNT; &#125; /** * 这里做内容解析，请求的封装 * * @param bodyMsg 封装的请求信息都放在这里面，供bcs的convertor解析获取， * 这里构造的结构需要根据具体的bcs接口的结构来定 * * @param task 存放发起方、bulk任务时间等bulk任务的一些基本信息 * @param data cvs/xml/excel等文件解析出来的内容，都会放在这里面 * @return message */ @Override public Message getBodyMessage(Message bodyMsg, Task task, BulkData data) &#123; logger.enterFunction(data.getDataContent()); // 获取订单计划 TaskPlan taskPlan = task.getTaskPlan(); // 获取订单计划参数 TaskPlanParameter taskPlanParameter = taskPlan.getParameter(); // TODO Message transMsg = bodyMsg.putMessage(&quot;ModifyDiscountRuleByCodeRequest&quot;); // 是否 需要构造Initiator，原定制代码中没有 Message initiatorMsg = transMsg.putMessage(ConvertorConstants.Initiator); initiatorMsg.put(ConvertorConstants.IdentifierType, InputNumberType.SP_OPERATOR_NAME.toCode()); initiatorMsg.put( ConvertorConstants.Identifier, SystemParamUtils.getStringParam(&quot;BACKEND_INITIATOR_SP_OPR_NAME&quot;)); // 构造PrimaryParty // 根据上傳文件ShortCode，构造Receiver Identifier // 构造ReceiverParty// Message receiverPartyMsg = transMsg.putMessage(ConvertorConstants.ReceiverParty);// receiverPartyMsg.put(ConvertorConstants.IdentityType, IdentityType.SP.toCode());// receiverPartyMsg.put(ConvertorConstants.IdentifierType, InputNumberType.SP_ID.toCode());// receiverPartyMsg.put(ConvertorConstants.Identifier, taskPlanParameter.getOwnerSpId().toString()); Message requestContextMsg = transMsg.putMessage(&quot;RequestContext&quot;); MessageList paramMsg = requestContextMsg.putList(ConvertorConstants.Parameter); // 设置ServiceCode if (!StringUtils.isEmpty(taskPlanParameter.getTransService())) &#123; Message paramServiceCode = paramMsg.putMessage(); paramServiceCode.put(ConvertorConstants.Key, ConvertorConstants.ServiceCode); paramServiceCode.put(ConvertorConstants.Value, taskPlanParameter.getTransService()); &#125; // 设置reasontype if (!StringUtils.isEmpty(taskPlanParameter.getReasonType())) &#123; Message paramReasonType = paramMsg.putMessage(); paramReasonType.put(ConvertorConstants.Key, ConvertorConstants.ReasonTypeCode); paramReasonType.put(ConvertorConstants.Value, taskPlanParameter.getReasonType()); &#125; // 设置currency // 设置currency // 解析业务参数 List&lt;String&gt; dataFieldsList = TxtFieldsUtils.formatInputData(data.getDataContent().toString()); decodeDataFieldsInfo(paramMsg, dataFieldsList); decodeDataFieldsInfoTobodyMsg(transMsg, dataFieldsList); logger.exitFunction(bodyMsg); return bodyMsg; &#125; private void decodeDataFieldsInfoTobodyMsg(Message transMsg, List&lt;String&gt; dataFieldsList) &#123; logger.enterFunction(); String chargeProfileName = dataFieldsList.get(0); if (StringUtils.isNotBlank(chargeProfileName)) &#123; chargeProfileName = chargeProfileName.trim(); transMsg.put(&quot;ChargeProfileName&quot;, chargeProfileName); &#125; String discountRule = dataFieldsList.get(1); if (StringUtils.isNotBlank(discountRule)) &#123; discountRule = discountRule.trim(); transMsg.put(&quot;DiscountRule&quot;, discountRule); &#125; String priority = dataFieldsList.get(2); if (StringUtils.isNotBlank(priority)) &#123; priority = priority.trim(); transMsg.put(&quot;Priority&quot;, priority); &#125; String effectiveStart = dataFieldsList.get(3); if (StringUtils.isNotBlank(effectiveStart)) &#123; effectiveStart = effectiveStart.trim(); transMsg.put(&quot;EffectiveStart&quot;, effectiveStart); &#125; String effectiveEnd = dataFieldsList.get(4); if (StringUtils.isNotBlank(effectiveEnd)) &#123; effectiveEnd = effectiveEnd.trim(); transMsg.put(&quot;EffectiveEnd&quot;, effectiveEnd); &#125; String value = dataFieldsList.get(5); if (StringUtils.isNotBlank(value)) &#123; value = value.trim(); transMsg.put(&quot;Value&quot;, value); &#125; String operationType = dataFieldsList.get(6); if (StringUtils.isNotBlank(operationType)) &#123; operationType = operationType.trim(); transMsg.put(&quot;OperationType&quot;, operationType); &#125; logger.exitFunction(); &#125; /** * &lt;一句话功能简述&gt; * &lt;功能详细描述&gt; * * @param paramMsg [参数说明] * @param dataFieldsList [参数说明] * @return void [返回类型说明] * @throws throws [违例类型] [违例说明] * @see [类、类#方法、类#成员] */ protected void decodeDataFieldsInfo(MessageList paramMsg, List&lt;String&gt; dataFieldsList) &#123; logger.enterFunction(); String chargeProfileName = dataFieldsList.get(0); if (StringUtils.isNotBlank(chargeProfileName)) &#123; chargeProfileName = chargeProfileName.trim(); Message paramChargeProfileName = paramMsg.putMessage(); paramChargeProfileName.put(ConvertorConstants.Key, &quot;ChargeProfileName&quot;); paramChargeProfileName.put(ConvertorConstants.Value, chargeProfileName); &#125; String discountRule = dataFieldsList.get(1); if (StringUtils.isNotBlank(discountRule)) &#123; discountRule = discountRule.trim(); Message paramDiscountRule = paramMsg.putMessage(); paramDiscountRule.put(ConvertorConstants.Key, &quot;DiscountRule&quot;); paramDiscountRule.put(ConvertorConstants.Value, discountRule); &#125; String priority = dataFieldsList.get(2); if (StringUtils.isNotBlank(priority)) &#123; priority = priority.trim(); Message paramPriority = paramMsg.putMessage(); paramPriority.put(ConvertorConstants.Key, &quot;Priority&quot;); paramPriority.put(ConvertorConstants.Value, priority); &#125; String effectiveStart = dataFieldsList.get(3); if (StringUtils.isNotBlank(effectiveStart)) &#123; effectiveStart = effectiveStart.trim(); Message paramEffectiveStart = paramMsg.putMessage(); paramEffectiveStart.put(ConvertorConstants.Key, &quot;EffectiveStart&quot;); paramEffectiveStart.put(ConvertorConstants.Value, effectiveStart); &#125; String effectiveEnd = dataFieldsList.get(4); if (StringUtils.isNotBlank(effectiveEnd)) &#123; effectiveEnd = effectiveEnd.trim(); Message paramEffectiveEnd = paramMsg.putMessage(); paramEffectiveEnd.put(ConvertorConstants.Key, &quot;EffectiveEnd&quot;); paramEffectiveEnd.put(ConvertorConstants.Value, effectiveEnd); &#125; String value = dataFieldsList.get(5); if (StringUtils.isNotBlank(value)) &#123; priority = priority.trim(); Message paramValue = paramMsg.putMessage(); paramValue.put(ConvertorConstants.Key, &quot;Value&quot;); paramValue.put(ConvertorConstants.Value, value); &#125; String operationType = dataFieldsList.get(6); if (StringUtils.isNotBlank(operationType)) &#123; priority = priority.trim(); Message paramOperationType = paramMsg.putMessage(); paramOperationType.put(ConvertorConstants.Key, &quot;OperationType&quot;); paramOperationType.put(ConvertorConstants.Value, operationType); &#125; logger.exitFunction(); &#125;&#125; report定制以及report数据预置 excel格式模板特殊处理 调用流程： com.huawei.payment.bc.process.bulk.impl.BulkTaskControllerImpl.ProcessTask#run123BulkTaskProcessor processor = (BulkTaskProcessor) ServiceLocator.findService(&quot;MQBulkTaskProcessor&quot;);processor.process(bulkTask, dataId); com.huawei.payment.bc.process.bulk.impl.MQBulkTaskProcessor#process1234567Request request = getBulkAgentRequest(bulkTask, bulkData, taskType);CommonService service = RemoteServiceFactory.getService(&quot;&quot;);// 通过mq去服务对应response = service.invoke(request);updateBulkDataWhenFinish(bulkTask, bulkData, response); com.huawei.bs.order.core.AbstractOrderService#doService12345// 这里就调用bcs执行相应的业务，执行完后在finally中会触发同步执行器，bulk的话就会有BulkResultTaskExecutor的，从而被BulkResultTaskExecutor#onEvent会被执行。所以report的构造是在bcs执行完所有业务流程之后才开始构造的。因此一般在执行完所需业务，就要把需要的数据塞到上下文中供report构造。this.onSyncExecutorEvent(orderContext, request, request.getHeader(), requestInfo, bmeException, notDoItService);publishEvent(orderContext); https://softwareinfo.huawei.com/cbs/doc/zh/V500R024/productDoc/#/item/c2x0ZC9jYnMvcGFnZXMvcGRmX2lmcmFtZV8wMTAyLmh0bWw https://www.cnblogs.com/woshimrf/p/tree.html","categories":[],"tags":[]},{"title":"个人网站搭建实践记录","slug":"5","date":"2024-10-22T10:40:09.405Z","updated":"2024-11-20T16:04:47.820Z","comments":true,"path":"article/5/","permalink":"https://aqianer.github.io/article/5/","excerpt":"先手动摘要 主要逻辑是使用hexo + github page实现将markdown文档转化为html页面，且hexo支持自定义博客主题，社区也有大量主题供选择","text":"先手动摘要 主要逻辑是使用hexo + github page实现将markdown文档转化为html页面，且hexo支持自定义博客主题，社区也有大量主题供选择 在没有引入个人域名前部署完成的个人博客网站 https://GithubUsername.github.io基本流程可以先搞个时间线来 操作步骤第一步：准备两个仓库（GithubUsername.github.io + 个人备份代码仓）第二步：安装hexo及相关包1npm i hexo-theme-volantis看文档第三步：选择主题模板在社区中选择主题，并且完成安装第四步：配置主题相关配置在备份代码仓里引入hexo相关的文件修改主配置文件包括主页的背景、字体、导航栏、侧边栏、组件，文章页面的摘要、标签等等第六步：进阶自动化部署在完成以上操作就可以开始写博客上传了 优化网站字体 字体在主题配置文件的plugins引入 12345# 引入字体 霞鹜文楷 WenKai: enable: true inject: | &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.staticfile.org/lxgw-wenkai-screen-webfont/1.7.0/style.css&quot; media=&quot;print&quot; onload=&quot;this.media=&#x27;all&#x27;&quot;&gt; 那个码农 Stellar 主题优化 - Rabbit&#39;s Blog 基本文本和字体样式 - 学习 Web 开发 | MDN Stellar：front-matter 全部字段索引 - XAOXUU Hexo Stellar 主题装修笔记 - 宇宙尽头的餐馆 右侧边栏的issue时间线123456gitissues: layout: timeline title: 更新日志 api: https://api.github.com/repos/aqianer/aqianer.github.io/issues user: aqianer limit: 8 1234567# 站点主结构树site_tree: # -- 列表类页面 -- # # 主页配置 home: leftbar: welcome, recent rightbar: gitissues 文章标签文档系统Stellar：如何使用文档系统 - XAOXUU 引入第三方评论库twikoo出现评论失败：0的报错 vercel云的域名不可用TODO : 了解先云计算 先用giscus凑合下在配置文件里选择 giscus 作为评论系统giscus中文文档先安装giscus-app 然后给自己新创建一个仓库，打开讨论功能，在giscus官网注册 华为OBS服务 结合 CDN 内容分发网络和Github Action 华为云命令行工具KooCLI版本以及obs-helper版本容易出问题，导致前几次action执行失败 1234567891011121314151617181920212223242526272829303132333435363738# workflowname: Blogon: push: branches: - mainjobs: workflow_demo: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Authenticate to Huawei Cloud uses: huaweicloud/auth-action@v1.1.0 with: access_key_id: $&#123;&#123; secrets.ACCESSKEY &#125;&#125; secret_access_key: $&#123;&#123; secrets.SECRETACCESSKEY &#125;&#125; region: &#x27;cn-south-1&#x27; project_id: &#x27;e31eae80c3014954b088d93e9a8a8950&#x27; # 使用华为云命令行工具KooCLI - name: List Versions of ECS With Default Region By KooCLI uses: huaweicloud/huaweicloud-cli-action@v1.0.0 with: commandList: &#x27;hcloud ECS NovaListVersions&#x27; # 上传文件到华为云OBS - name: Upload To HuaweiCloud OBS uses: huaweicloud/obs-helper@v1.0.1 id: upload_file_to_obs with: bucket_name: &#x27;blog-ccl-aqianer&#x27; local_file_path: &#x27;source/_posts/image&#x27; obs_file_path: &#x27;blogimg&#x27; operation_type: &#x27;upload&#x27; include_self_folder: true 现在将obs中的桶作为cdn源网站 给cdn配置域名，由于要ICP备案一直没通过，cdn流程卡了一会儿 参考文档hexo官方文档自定义hexo主题使用EJS（模板引擎）动态绑定页面中的数据_express ejs模板引擎绑定图片src-CSDN博客华为云自动鉴权 参考模板stellar主题作者博客","categories":[],"tags":[]},{"title":"Hello World","slug":"2","date":"2024-10-19T11:09:55.354Z","updated":"2024-10-19T06:07:20.910Z","comments":true,"path":"article/2/","permalink":"https://aqianer.github.io/article/2/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Burpsuite抓包实践","slug":"1","date":"2024-09-22T16:00:00.000Z","updated":"2024-10-23T14:12:43.561Z","comments":true,"path":"article/1/","permalink":"https://aqianer.github.io/article/1/","excerpt":"","text":"实现隐藏root和绕过SSL证书校验抓包 场景：目前安全测试经常遇到移动APP只支持Android9.0以上ARM架构的模拟器安装、且APP检测root，验证SSL证书的场景。之前的Xposed框架只支持到Android8.1就不再更新了, 因此Android 9.0以上的模拟器需要选择其它方案。 1. 实现隐藏root和绕过SSL证书校验抓包 安装模拟器雷电9（Android9.0兼容arm架构）：ldinst9_9.0.24.2.exe https://res.ldmnq.com/download/leidian9/ldinst9_9.0.24.2.exe 2. 设置代理：Burpsuiteproxy配置选择本机ip，端口号按如下设置 3. 安装burpsuite证书在burpsuite proxy options导出证书，导入到模拟器中并安装 由于模拟器设置burp代理访问https，会提示证书不信任，需要装LSposed框架来安装justtrustme插件和magisk隐藏root（一般应用会检测是否系统是否root,如果是则退出应用）。 4. 开启模拟器root权限和adb调试权限。adb命令大全 用powershell执行adb命令需要将adb.exe配置到环境变量里 5. 性能设置里，将System.vmdk设置成可写入。然后重启模拟器6. 安装magisk管理器，这里雷电9应该安装debug版本的。https://github.com/topjohnwu/magisk-files/blob/canary/app-debug.apk 7. 给magisk超级用户权限 要给面具开root，涉及到adb是否可以切换到su权限 123456789101112131415PS C:\\Users\\c60038363\\Desktop\\小工具\\雷电模拟器\\雷电模拟器&gt; adb shellstar2qltechn:/ $star2qltechn:/ $star2qltechn:/ $ susustar2qltechn:/# 8. 点击安装，允许权限，下一步，方式选择安装至系统分区，然后开始9. 打开magisk设置，勾选zygisk后，重启10. 安装lsposed：https://github.com/LSPosed/LSPosed/releases 将LSPosed-v1.8.4-6609-zygisk-release.zip推送到模拟器，magisk模块选择从本地安装。安装完重启 配置 123adb push LSPosed-v1.8.4-6609-zygisk-release.zip /sdcard/Download/ 11. 安装LSPosed Manager 模拟器打开文件管理器 下载到本地，然后安装manager.apk 12. 安装justtrustme https://github.com/ViRb3/TrustMeAlready 安装apk后，在lsposed上启动模块，选择要启动的该模块的应用 13. 隐藏root， 进入magisk设置，选择magiskhide菜单，选择要隐藏的进程，即可针对app隐藏root检测。 最后。需要关闭虚拟机自带root权限，让magisk来接管root权限,来应对下面问题: 进入magisk提示不属于magisk的su。此时要关闭模拟器自带的root。再重启 14. 再重启模拟器，即可实现隐藏root和绕过SSL证书校验抓包。","categories":[],"tags":[]},{"title":"工作常见问题记录","slug":"4","date":"2023-12-22T16:00:00.000Z","updated":"2024-10-23T15:30:00.591Z","comments":true,"path":"article/4/","permalink":"https://aqianer.github.io/article/4/","excerpt":"","text":"开发流程： 1、参与se评审规格，提出疑问，同步准备环境，fork代码仓库，se分解需求 2、书写story，story写出开发实现方案，书写ST用例，评审story和用例，发评审结论邮件，并上传到d-box，上ewindcloud领取story，并启动，同时将st用例上传到ewindcloud 3、编码，自验证，自己参照checklist检查一遍编码规范，然后使用需求&#x2F;问题单提交代码到自己的代码仓库，再使用使用需求&#x2F;问题单发起合并，找对应局点&#x2F;模块MDE评审代码，再找commit评审合入代码 4、通知pm、ci出包，升级ci环境，并上ci环境验证、showcase，showcase用例可以使用st用例或者是测试提供的showcase用例，发showcase结论邮件，如有问题先修改问题后通知pm\\ci出包升级，并验证通过，然后上传邮件到d-box，同时上ewindcloud将story走到开发结束状态，st用例pass掉 5、pm发邮件转测试，之后就是有问题改问题单就行 CI&#x2F;CD:持续集成和持续交付&#x2F;部署的缩写，旨在简化并加快软件开发生命周期 CI&#x2F;CD红帽官方 123456789101112131415161718192021222324(function()&#123; if(StringUtils.isBlank(body.Body.Identity.ReceiverParty.Identifier))&#123; if(body.Body.Identity.ReceiverParty != null)&#123; var identifier = body.Body.Identity.ReceiverParty.Identifier; if(StringUtils.isBlank(identifier))&#123; var identifierType = body.Body.Identity.ReceiverParty.IdentifierType; switch(identifierType)&#123; case &#x27;1&#x27;: case &#x27;11&#x27;: case &#x27;12&#x27;: return getBinding()[&quot;body&quot;].identifier; case &#x27;4&#x27;: return getBinding()[&quot;body&quot;].merchCode; &#125; &#125; else &#123; return dataMapping(&quot;DjiboutiShortCodeMapping&quot;, &quot;ShortCodeMapping&quot;, identifier, identifier); &#125; &#125;else&#123; return body.Body.Identity.ReceiverParty.Identifier; &#125;&#125;)(); 1kubectl exec -it appserverconsumerbasic-85fd765cc9-ftjk7 -n app bash 抓包 123tcpdump tcp -i ens3f0 -t -s 0 -c 100 and dst port ! 22 and src net 192.168.2.0/24 -w ./target.captcpdump -i any -s 0 -w /home/qhy/huawei.cap host 7.225.74.42 当某个业务流程不允许针对同一个对象存在并发的请求时，需要在本表保存当前正在处理的业务请求，供系统检查是否同一个对象存在并发请求。例如同一个Customer，如果其存在未完成的Change KYC业务请求，那么不允许针对这个Customer再次发起Change KYC的请求。 使用 Macle 编译生成小程序二维码，再通过模拟器运行app扫描进入小程序页面 在vscode中安装Macle插件选择 Install From VSIX macle-miniprogram-tools-24.6.0.vsix 导入模拟器插件 Macle_24.6.0_DevSuite_Simulator_Win.zip 将h5转小程序后，vsCode打开app目录（index.html所在目录） 点击Macle插件界面，点击Wired Debugging（重新生成需要关掉该界面再重新点Wried Debugging） 在模拟器中打开APP，登录进去后先点一下CashOut或者其他小程序再返回到登录后的初始界面。 回到起始界面后点击“Scan &amp; Pay“，选择实时截取屏幕，扫描Macle插件生成的二维码就能在app中打开小程序（可能会失败，多试几次）。 typora的图片上传和GitHub &#x3D;&#x3D;&#x3D;&#x3D;&gt; markdown引入github图片 网关Fabric 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071apigw.getProperty(&quot;MoovWalletVersion&quot;)&quot;VerifyRenewalOffer&quot;&quot;CheckAccount&quot;&quot;GetCANALOffers&quot;&quot;DeleteCard&quot;(function()&#123; return UUID.randomUUID();&#125;)();apigw.getProperty(&quot;MoovWalletCallerType&quot;)apigw.getProperty(&quot;MoovWalletThirdPartyID&quot;)(function()&#123; var password=requestBody.Body.Identity.Initiator.SecurityCredential; if(StringUtils.isBlank(password))&#123; return getConfig(&#x27;secretKeys&#x27;,&#x27;dftGrp&#x27;,&#x27;MoovTogoWalletAPICallerPassword&#x27;)[&quot;key&quot;] &#125;else&#123; return password; &#125;&#125;)();apigw.getProperty(&quot;MoovWalletKeyOwner&quot;)(function()&#123; return DateUtils.format(new Date, &#x27;yyyyMMddHHmmss&#x27;);&#125;)();apigw.getProperty(&quot;TogoAppChannelCode&quot;)(function()&#123; var Identifier=requestBody.Body.Identity.Initiator.Identifier; if(StringUtils.isBlank(Identifier))&#123; var identifierType = requestBody.Body.Identity.Initiator.IdentifierType; switch(identifierType)&#123; case &#x27;1&#x27;: case &#x27;11&#x27;: case &#x27;12&#x27;: return getBinding()[&quot;requestBody&quot;].identifier; case &#x27;14&#x27;: return apigw.getProperty(&quot;MoovWalletInitiatorSPIdentifier&quot;); &#125; &#125;else&#123; return Identifier; &#125;&#125;)();(function()&#123; var security = requestBody.Body.Identity.Initiator.SecurityCredential; var platform =getBinding()[&quot;requestBody&quot;].platform; var initiatorPin=getBinding()[&quot;requestBody&quot;].initiatorPin; if(StringUtils.isBlank(security))&#123; var identifierType = requestBody.Body.Identity.Initiator.IdentifierType; switch(identifierType)&#123; case &#x27;1&#x27;: case &#x27;11&#x27;: case &#x27;12&#x27;: if(platform === &#x27;android&#x27;) &#123; return initiatorPin; &#125;else &#123; return reEncrypt4WalletByRsa256(initiatorPin); &#125; case &#x27;14&#x27;: return getConfig(&#x27;secretKeys&#x27;,&#x27;dftGrp&#x27;,&#x27;MoovTogoWalletInitiatorSPPassword&#x27;)[&quot;key&quot;]; &#125; &#125;else &#123; return security; &#125;&#125;)(); 容器（k8s &amp; docker）相关命令docker和K8s的使用，以及nslb的使用短信服务怎么实现爬取校园网站的数据：svg使用–自定义GitHub个人简介页面–爬虫案例–爬取课表–安装selenium模块k8s的集群编排:k8s官方教程—红帽官方介绍—-华为云 7.225.7.126 k8s 7.225.6.215 db 7.225.4.210 nslb 7.225.7.110 redis 7.225.4.253 redis 7.225.4.227 zk,kafka 7.225.7.69 7.225.4.149 7.225.6.134 payment 短信 7.225.6.215:9223 mm短信 7.225.72.160:9223 payment数据库 7.225.6.215 mm数据库 7.225.75.91 mm portal https://7.225.72.160:31102/payment/login.action mm后台 7.225.72.160 nslb https://7.225.4.210:8445 apollo https://7.225.4.210:37443/apollo/signin apiportal https://7.225.4.210:37443/sum/web/login/login.html?&gt;tenantSpaceId=fabric_tenant&amp;fabricLogin=true spportal https://7.225.4.210:37443/sum/web/login/login.html 小程序管理平台 https://7.225.4.210:37443/sum/web/login/login.html?&gt;tenantSpaceId=miniprogram_tenant&amp;miniProgramLogin=true DV https://7.212.194.190:31943/paasportal/main.action 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596kwephis19630725:~ # kubectl get pods -ANAMESPACE NAME READY STATUS RESTARTS AGEapp appgateway-566c69b5cb-jm5rp 2/2 Running 0 4h40mapp appservercommon-b9cc6774d-qqwtc 2/2 Running 0 10dapp appserverconsumerbasic-74dbcf4959-5n6xv 2/2 Running 0 30happ appserverconsumercore-85d46d857-v2d29 2/2 Running 0 30happ appserverpartner-67b849475c-6cjpp 2/2 Running 0 30happcube appcube-ops-agent-q5d55 1/1 Running 1 (23d ago) 23dappcube appcube-prometheus-0 1/1 Running 0 23dappcube authcenter-585554dc87-rj6wm 1/1 Running 2 (23d ago) 23dappcube bingo-7568df64d8-sf89p 1/1 Running 2 (23d ago) 23dappcube cdappengine-1-557749f6c8-c8jtv 1/1 Running 2 (23d ago) 24dappcube etcd-0 1/1 Running 1 (23d ago) 23dappcube flume-5fc88fbbc-dn9zr 1/1 Running 2 (2d5h ago) 23dappcube frontend-service-f4db67f94-ljt7z 1/1 Running 0 23dappcube kafka-0 1/1 Running 1 (23d ago) 23dappcube macleapp-5d868476dc-8qp95 1/1 Running 0 3dappcube macleserver-59649c9b-dcwcl 1/1 Running 0 3dappcube magnogallery-594cc6cfc9-hsvf7 1/1 Running 47 (11h ago) 23dappcube magnorender-68b8567bcc-nccnv 1/1 Running 46 (10h ago) 23dappcube magnostudio-578448dd57-pn6bz 1/1 Running 46 (11h ago) 23dappcube manager-864654d5c9-jg6td 1/1 Running 0 23dappcube minio-0 1/1 Running 0 23dappcube miniprogram-679cb688b4-xbnzj 1/1 Running 0 96mappcube miniprogrameventrans-59799597b-xnl6c 1/1 Running 61 (5h59m ago) 23dappcube miniprogrameventstats-65f7f949c-vbk4g 1/1 Running 17 (10h ago) 23dappcube nginxingresscontroller-56f46f658f-wrtq7 1/1 Running 0 23dappcube redis-server-0 1/1 Running 1 (23d ago) 23dappcube servicebroker-6447dd7694-68qgc 1/1 Running 83 (5h3m ago) 23dappcube taskcenter-5d66f48f97-s4xkw 1/1 Running 2 (23d ago) 23dappcube ui-server-556bdd7d55-8xwf7 1/1 Running 0 23dappcube vsearch-0 1/1 Running 1 (23d ago) 23dappcube websocket-858d45d895-lghr2 1/1 Running 5 (7d7h ago) 23dappcube zookeeper-0 1/1 Running 1 (23d ago) 23ddmz h5job-app-lqssw 0/1 Completed 0 90ddmz h5job-qv4s9 0/1 Completed 0 90ddmz nslb-deploy-55d8f8fdc6-xp5qj 1/1 Running 0 23distio-system istio-ingressgateway-6cf584678d-gzj6v 1/1 Running 1 (82d ago) 90distio-system istiod-79476dbf64-7xfz9 1/1 Running 1 (82d ago) 90dmanage coredns-5998bcfd6f-pw5zc 1/1 Running 0 91dmanage etcd-paas-7-225-7-126 1/1 Running 0 91dmanage kube-apiserver-paas-7-225-7-126 1/1 Running 0 91dmanage kube-controller-manager-paas-7-225-7-126 1/1 Running 1 (24d ago) 91dmanage kube-flannel-ds-amd64-27z9q 1/1 Running 0 91dmanage kube-flannel-ds-amd64-4n66z 1/1 Running 1 (82d ago) 90dmanage kube-flannel-ds-amd64-k6rvp 1/1 Running 1 (82d ago) 90dmanage kube-flannel-ds-amd64-m8zs2 1/1 Running 0 90dmanage kube-flannel-ds-amd64-nv7n9 1/1 Running 3 (23d ago) 90dmanage kube-flannel-ds-amd64-vprhh 1/1 Running 0 90dmanage kube-multus-ds-45kzq 1/1 Running 3 (23d ago) 90dmanage kube-multus-ds-5ph8w 1/1 Running 0 90dmanage kube-multus-ds-9fd7m 1/1 Running 1 (82d ago) 90dmanage kube-multus-ds-jchjc 1/1 Running 1 (82d ago) 90dmanage kube-multus-ds-p62gg 1/1 Running 0 90dmanage kube-multus-ds-q9lvl 1/1 Running 0 91dmanage kube-scheduler-paas-7-225-7-126 1/1 Running 1 (24d ago) 91dmanage swr-api-server-56b6d67679-h2p2q 1/1 Running 0 91dmanage webhook-paas-7-225-7-126 1/1 Running 0 91dmpaas apollo-admin-server-pro-79f64bc84b-tsz2h 2/2 Running 0 64dmpaas apollo-config-server-pro-77668c4c7d-cspmz 2/2 Running 1 (24d ago) 64dmpaas apollo-portal-server-7859cf4bf6-v99ks 2/2 Running 0 23dmpaas hda-5f77b9577c-l86kx 2/2 Running 0 64dmpaas licensecenter-54b4449dff-vmqf5 2/2 Running 0 64dmpaas notification-7f9b88d8d6-pgjlp 2/2 Running 4 (64d ago) 64dmpaas taskjob-f746f95b9-bm8tv 2/2 Running 0 64dops access-inbound-6b95f88b59-x7p5b 1/1 Running 2 (23d ago) 64dops access-outbound-66c474c6dd-lzcs5 1/1 Running 0 11dops apigovernance-0 1/1 Running 2 (23d ago) 64dops apigovernance-preinstall-6hllm 0/1 Completed 0 90dops apigovernance-preupgrade-n8qb6 0/1 Completed 0 64dops apiportal-cf45c4578-w4nvn 1/1 Running 0 64dops appdbjob-c6lkn 0/1 Completed 0 87dops digitalware-kafka-0 1/1 Running 0 64dops node-tasks-4dzg2 1/1 Running 2 (23d ago) 64dops node-tasks-g7hrp 1/1 Running 0 64dops node-tasks-qbkfb 1/1 Running 0 64dops node-tasks-qxsbw 1/1 Running 0 64dops node-tasks-vm6xz 1/1 Running 0 64dops paymentdbjob-tx99d 0/1 Completed 0 87dops redis-0 1/1 Running 0 11dops redis-1 1/1 Running 0 11dops sia-deploy-7d575d98d6-s6r6p 1/1 Running 0 64dops sumapp-deploy-59b9848d84-qdn9g 1/1 Running 0 64dops zookeeper-0 1/1 Running 0 64dpayment channelcenter-dc7bbdfbc-2qh8g 2/2 Running 0 10dpayment coordinator-d4bb754c6-92rf8 2/2 Running 0 13dpayment lightbusiness-657646449b-8cbqz 2/2 Running 0 30hpayment ordercenter-7c9d5f948d-c2wpd 2/2 Running 0 13dpayment partner-7b78c957f4-7wlb9 2/2 Running 0 10dpayment paymentcenter-557d659456-td99b 2/2 Running 0 86mpayment pws-647444845f-hvx69 2/2 Running 0 58dpayment settlementcenter-669955745f-brzp5 2/2 Running 0 86mpayment spportal-5c8db9bcb8-78w4h 2/2 Running 0 10dreport dataintegrationapp-1-f49b5997c-k8vzs 1/1 Running 1 (82d ago) 90dreport reportapp-1-b454f6db8-nrbvx 1/1 Running 1 (82d ago) 90d 12345678910111213141516171819202122kwephis19630725:~ # kubectl config viewapiVersion: v1clusters:- cluster: certificate-authority-data: DATA+OMITTED server: https://7.225.7.126:5443 name: clustercontexts:- context: cluster: cluster user: cfe-master name: defaultContextcurrent-context: defaultContextkind: Configpreferences: &#123;&#125;users:- name: cfe-master user: client-certificate-data: REDACTED client-key-data: REDACTED 123456789kwephis19630725:~ # kubectl get nodesNAME STATUS ROLES AGE VERSIONdynamic.7.225.4.210 Ready &lt;none&gt; 90d v1.25.3dynamic.7.225.4.227 Ready &lt;none&gt; 90d v1.25.3dynamic.7.225.4.253 Ready &lt;none&gt; 90d v1.25.3dynamic.7.225.7.110 Ready &lt;none&gt; 90d v1.25.3dynamic.7.225.7.69 Ready &lt;none&gt; 90d v1.25.3paas-7-225-7-126 Ready &lt;none&gt; 91d v1.25.3 123456789101112kwephis19630725:~ # knlabels+---------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+|node_name |labels |+---------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+|dynamic.7.225.4.210 |&quot;SITEID&quot;:&quot;1&quot; &quot;apaas-node&quot;:&quot;apaas&quot; &quot;app-node&quot;:&quot;app&quot; &quot;cdappengine&quot;:&quot;s72254210&quot; &quot;hostgroup&quot;:&quot;FinancePR&quot; &quot;mid-node&quot;:&quot;mid&quot; &quot;nodeType&quot;:&quot;prod&quot; &quot;nslb-node&quot;:&quot;nslb&quot; &quot;payment-node&quot;:&quot;payment&quot; ||dynamic.7.225.4.227 |&quot;SITEID&quot;:&quot;1&quot; &quot;apaas-node&quot;:&quot;apaas&quot; &quot;app-node&quot;:&quot;app&quot; &quot;hostgroup&quot;:&quot;FinancePR&quot; &quot;kafka-node&quot;:&quot;kafka&quot; &quot;mid-node&quot;:&quot;mid&quot; &quot;payment-node&quot;:&quot;payment&quot; &quot;zookeeper-node&quot;:&quot;zookeeper&quot; ||dynamic.7.225.4.253 |&quot;SITEID&quot;:&quot;1&quot; &quot;apaas-node&quot;:&quot;apaas&quot; &quot;app-node&quot;:&quot;app&quot; &quot;hostgroup&quot;:&quot;FinancePR&quot; &quot;mid-node&quot;:&quot;mid&quot; &quot;payment-node&quot;:&quot;payment&quot; &quot;redis-node&quot;:&quot;redis&quot; ||dynamic.7.225.7.110 |&quot;SITEID&quot;:&quot;1&quot; &quot;apaas-node&quot;:&quot;apaas&quot; &quot;app-node&quot;:&quot;app&quot; &quot;hostgroup&quot;:&quot;FinancePR&quot; &quot;mid-node&quot;:&quot;mid&quot; &quot;payment-node&quot;:&quot;payment&quot; &quot;redis-node&quot;:&quot;redis&quot; ||dynamic.7.225.7.69 |&quot;SITEID&quot;:&quot;1&quot; &quot;apaas-node&quot;:&quot;apaas&quot; &quot;app-node&quot;:&quot;app&quot; &quot;hda-node&quot;:&quot;hda&quot; &quot;hostgroup&quot;:&quot;FinancePR&quot; &quot;mid-node&quot;:&quot;mid&quot; &quot;payment-node&quot;:&quot;payment&quot; &quot;report-node&quot;:&quot;report&quot; ||paas-7-225-7-126 |&quot;SITEID&quot;:&quot;1&quot; &quot;hostgroup&quot;:&quot;FinancePR&quot; &quot;os.architecture&quot;:&quot;amd64&quot; &quot;os.name&quot;:&quot;SUSE_Linux_Enterprise_Server_12_SP5&quot; &quot;os.version&quot;:&quot;SUSE_12_SP5&quot; |+---------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676677678679680681682683684685686687688689690691692693694695696697698699700701702703704705706707708709710711712713714715716717718719720721722723724725726727728729730731732733734735 kwephis19630725:~ # kubectl cluster-infoKubernetes control plane is running at https://7.225.7.126:5443To further debug and diagnose cluster problems, use &#x27;kubectl cluster-info dump&#x27;.kwephis19630725:~ # kubectl cluster-info dump&#123; &quot;kind&quot;: &quot;NodeList&quot;, &quot;apiVersion&quot;: &quot;v1&quot;, &quot;metadata&quot;: &#123; &quot;resourceVersion&quot;: &quot;20279107&quot; &#125;, &quot;items&quot;: [ &#123; &quot;metadata&quot;: &#123; &quot;name&quot;: &quot;dynamic.7.225.4.210&quot;, &quot;uid&quot;: &quot;520a5f20-ca5d-4d19-b506-10a6b9ac3671&quot;, &quot;resourceVersion&quot;: &quot;20278469&quot;, &quot;creationTimestamp&quot;: &quot;2024-06-28T02:36:27Z&quot;, &quot;labels&quot;: &#123; &quot;SITEID&quot;: &quot;1&quot;, &quot;apaas-node&quot;: &quot;apaas&quot;, &quot;app-node&quot;: &quot;app&quot;, &quot;beta.kubernetes.io/arch&quot;: &quot;amd64&quot;, &quot;beta.kubernetes.io/os&quot;: &quot;linux&quot;, &quot;cdappengine&quot;: &quot;s72254210&quot;, &quot;digitalfoundry.ccc/createmode&quot;: &quot;dynamic&quot;, &quot;digitalfoundry/address&quot;: &quot;7.225.4.210&quot;, &quot;digitalfoundry/namespace&quot;: &quot;ns000000000000000000001&quot;, &quot;digitalfoundry/os.hostname&quot;: &quot;kwephis19631198&quot;, &quot;digitalfoundry/os.version&quot;: &quot;SUSE12_SP5&quot;, &quot;hostgroup&quot;: &quot;FinancePR&quot;, &quot;kubernetes.io/arch&quot;: &quot;amd64&quot;, &quot;kubernetes.io/hostname&quot;: &quot;dynamic.7.225.4.210&quot;, &quot;kubernetes.io/os&quot;: &quot;linux&quot;, &quot;mid-node&quot;: &quot;mid&quot;, &quot;nodeType&quot;: &quot;prod&quot;, &quot;nslb-node&quot;: &quot;nslb&quot;, &quot;payment-node&quot;: &quot;payment&quot;, &quot;supportContainer&quot;: &quot;true&quot; &#125; &#125;, &quot;spec&quot;: &#123; &quot;podCIDR&quot;: &quot;182.10.5.0/24&quot;, &quot;podCIDRs&quot;: [ &quot;182.10.5.0/24&quot; ] &#125;, &quot;status&quot;: &#123; &quot;capacity&quot;: &#123; &quot;cpu&quot;: &quot;16&quot;, &quot;ephemeral-storage&quot;: &quot;10218772Ki&quot;, &quot;hugepages-1Gi&quot;: &quot;0&quot;, &quot;hugepages-2Mi&quot;: &quot;0&quot;, &quot;memory&quot;: &quot;65435080Ki&quot;, &quot;pods&quot;: &quot;200&quot; &#125;, &quot;allocatable&quot;: &#123; &quot;cpu&quot;: &quot;15800m&quot;, &quot;ephemeral-storage&quot;: &quot;10218772Ki&quot;, &quot;hugepages-1Gi&quot;: &quot;0&quot;, &quot;hugepages-2Mi&quot;: &quot;0&quot;, &quot;memory&quot;: &quot;65435080Ki&quot;, &quot;pods&quot;: &quot;200&quot; &#125;, &quot;conditions&quot;: [ &#123; &quot;type&quot;: &quot;NetworkUnavailable&quot;, &quot;status&quot;: &quot;False&quot;, &quot;lastHeartbeatTime&quot;: &quot;2024-09-02T21:32:51Z&quot;, &quot;lastTransitionTime&quot;: &quot;2024-09-02T21:32:51Z&quot;, &quot;reason&quot;: &quot;FlannelIsUp&quot;, &quot;message&quot;: &quot;Flannel is running on this node&quot; &#125;, &#123; &quot;type&quot;: &quot;Ready&quot;, &quot;status&quot;: &quot;True&quot;, &quot;lastHeartbeatTime&quot;: &quot;2024-09-26T11:34:45Z&quot;, &quot;lastTransitionTime&quot;: &quot;2024-09-02T21:31:58Z&quot;, &quot;reason&quot;: &quot;KubeletReady&quot;, &quot;message&quot;: &quot;kubelet is posting ready status. AppArmor enabled&quot; &#125;, &#123; &quot;type&quot;: &quot;MemoryPressure&quot;, &quot;status&quot;: &quot;False&quot;, &quot;lastHeartbeatTime&quot;: &quot;2024-09-26T11:34:45Z&quot;, &quot;lastTransitionTime&quot;: &quot;2024-09-02T21:31:58Z&quot;, &quot;reason&quot;: &quot;KubeletHasSufficientMemory&quot;, &quot;message&quot;: &quot;kubelet has sufficient memory available&quot; &#125;, &#123; &quot;type&quot;: &quot;DiskPressure&quot;, &quot;status&quot;: &quot;False&quot;, &quot;lastHeartbeatTime&quot;: &quot;2024-09-26T11:34:45Z&quot;, &quot;lastTransitionTime&quot;: &quot;2024-09-02T21:31:58Z&quot;, &quot;reason&quot;: &quot;KubeletHasNoDiskPressure&quot;, &quot;message&quot;: &quot;kubelet has no disk pressure&quot; &#125;, &#123; &quot;type&quot;: &quot;PIDPressure&quot;, &quot;status&quot;: &quot;False&quot;, &quot;lastHeartbeatTime&quot;: &quot;2024-09-26T11:34:45Z&quot;, &quot;lastTransitionTime&quot;: &quot;2024-09-02T21:31:58Z&quot;, &quot;reason&quot;: &quot;KubeletHasSufficientPID&quot;, &quot;message&quot;: &quot;kubelet has sufficient PID available&quot; &#125; ], &quot;addresses&quot;: [ &#123; &quot;type&quot;: &quot;InternalIP&quot;, &quot;address&quot;: &quot;7.225.4.210&quot; &#125;, &#123; &quot;type&quot;: &quot;Hostname&quot;, &quot;address&quot;: &quot;dynamic.7.225.4.210&quot; &#125; ], &quot;daemonEndpoints&quot;: &#123; &quot;kubeletEndpoint&quot;: &#123; &quot;Port&quot;: 10250 &#125; &#125;, &quot;nodeInfo&quot;: &#123; &quot;machineID&quot;: &quot;ab46b88e621e9bbede542d07658d4bbd&quot;, &quot;systemUUID&quot;: &quot;F6D21E3F-C7CE-4126-9080-625A3F05C4EE&quot;, &quot;bootID&quot;: &quot;840eddb4-0260-46e9-b3af-5a405974754f&quot;, &quot;kernelVersion&quot;: &quot;4.12.14-122.186-default&quot;, &quot;osImage&quot;: &quot;SUSE Linux Enterprise Server 12 SP5&quot;, &quot;containerRuntimeVersion&quot;: &quot;docker://20.10.25-ce&quot;, &quot;kubeletVersion&quot;: &quot;v1.25.3&quot;, &quot;kubeProxyVersion&quot;: &quot;v1.25.3&quot;, &quot;operatingSystem&quot;: &quot;linux&quot;, &quot;architecture&quot;: &quot;amd64&quot; &#125;, &quot;images&quot;: [ &#123; &quot;names&quot;: [ &quot;cdappcube_x86:24.7.0&quot; ], &quot;sizeBytes&quot;: 1551057951 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/manager@sha256:65ce2721a805672083b91244c00981a86636ac30cd07492f22c9305d67429df0&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/manager:24.7.0&quot; ], &quot;sizeBytes&quot;: 1374934666 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/magnorender@sha256:4119564019217d6389c530907b21b1d0748b5f0e2a7bec7b678d5c33bd1f563e&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/magnorender:24.7.0&quot; ], &quot;sizeBytes&quot;: 1316387080 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/apifabric_access@sha256:b7632f56c92d8780d7dfb80a5487514b83a708c8458980fa6f1251a40f0f5cf1&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/apifabric_access:V600R024C01&quot; ], &quot;sizeBytes&quot;: 1147619283 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/apifabric_access@sha256:8cb74c7f5ab768a93f8dd0ccf871c7a81c7ad7e6828b7201e69e09914c3df682&quot; ], &quot;sizeBytes&quot;: 1147283538 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/apifabric_governance@sha256:14044dab45402a1f5fceee28313e62e65fb6464883bb24370e85fcf62de55a63&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/apifabric_governance:V600R024C01&quot; ], &quot;sizeBytes&quot;: 1125003772 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/apifabric_governance@sha256:2bab7ad4382f34f83e2cd02edde293ce00a0109a070e2ba35b67bc6000f1f048&quot; ], &quot;sizeBytes&quot;: 1124886706 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/f-lowcodeui@sha256:9f039000dfbfeff348e37d9a405a89a0bffbc17821ef7bef6730f0f312244633&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/f-lowcodeui:24.7.0&quot; ], &quot;sizeBytes&quot;: 962472573 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/miniprogram@sha256:c83da230d49811f26fe0aa864c22f70fec7fe09aaa0cf666779de29232545b7d&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/miniprogram:24.7.T3&quot; ], &quot;sizeBytes&quot;: 952642874 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/miniprogram@sha256:431c99c3812dcfe44fe80df04daadab8f4af4c818a103172f61199396fdfbecd&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/miniprogram:24.9.0.2409101448&quot; ], &quot;sizeBytes&quot;: 952627862 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/miniprogram@sha256:bfd4e6000b14dfdce25a3ce98795d84f10837c3980d63b6e738814313a8bcbe1&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/miniprogram:24.7.0&quot; ], &quot;sizeBytes&quot;: 952294648 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/dw_zookeeper@sha256:f47a2b1f61bfc73a4ae5f9096fa39ad840fea94d648fc4dbf690658e85c0ce5a&quot;, &quot;7.225.7.126:20202/root/dw_zookeeper@sha256:f47a2b1f61bfc73a4ae5f9096fa39ad840fea94d648fc4dbf690658e85c0ce5a&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/dw_zookeeper:24.7.0&quot;, &quot;7.225.7.126:20202/root/dw_zookeeper:24.7.0&quot; ], &quot;sizeBytes&quot;: 904123130 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/dw_vsearch@sha256:ba7b64fd04fdfa622e2ff53bc803e5470070c4237e5554259a9e7701d03bcf5d&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/dw_vsearch:24.7.0&quot; ], &quot;sizeBytes&quot;: 889388741 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/nslb-suse12sp5-x86-64@sha256:33498e748dde177b662bc0e2305b968a301820a30af6736f50a1175173998299&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/nslb-suse12sp5-x86-64:v600r024c10&quot; ], &quot;sizeBytes&quot;: 885742879 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/managerui@sha256:363068b4e88802db3e526266f058759612659db3cc8ee74c01d431ddef0bb6fc&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/managerui:24.7.0&quot; ], &quot;sizeBytes&quot;: 885552283 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/taskjob@sha256:8199a23b03438fc4219911d30dbce77e25a410b1fb2299bce05d6cc690ebfbfc&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/taskjob:24.1.0.202406280042.suse&quot; ], &quot;sizeBytes&quot;: 875652222 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/licensecenter@sha256:74ba00d3a360d29514a652623e36996271e84ee9eaf22ea52174fca536f74228&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/licensecenter:24.1.0.202406280042.suse&quot; ], &quot;sizeBytes&quot;: 874846563 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/appservercommon@sha256:135916fa701c1f1facdc6065f68c493b804132ed0cb5878e42b8d9a955ba0417&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/appservercommon:24.0.0.B001.20240604030508&quot; ], &quot;sizeBytes&quot;: 851780640 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/dw_kafka@sha256:bdda3e5b978819926298d72d4023ad517fc545275f4d6546d855c6121ff40985&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/dw_kafka:24.7.0&quot; ], &quot;sizeBytes&quot;: 851549521 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/macleserver@sha256:e7d6e15c439d61ecf943e86b2463a0c4f1e8bb3cc6a10c1db8eddcd3d0abd2ec&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/macleserver:24.7.T3&quot; ], &quot;sizeBytes&quot;: 847641126 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/macleserver@sha256:8e76ed5e60de41c3ca20406917627d5383d98e5abcf55c76d00948ac8937611e&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/macleserver:24.9.0.2409101448&quot; ], &quot;sizeBytes&quot;: 847616716 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/macleserver@sha256:b62d470935f2804c27bbf4d6e47a88118824e471f755a9c87bd45a338a4c09d3&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/macleserver:24.7.0.2409051530&quot; ], &quot;sizeBytes&quot;: 847616536 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/macleserver@sha256:e41a8bbbe46a76852ac1e666cbab2bf3d7853a7ec67da6ef2f26ad0b84efa184&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/macleserver:24.7.0&quot; ], &quot;sizeBytes&quot;: 847298062 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/moovcorteappserverpartner@sha256:db64c04b5d63df6ad1c823396dfa10ea6422cb3739528cd81a103689cf742902&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/moovcorteappserverpartner:524.0.T1-LCI101.B001.20240731140255&quot; ], &quot;sizeBytes&quot;: 836279410 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/macleapp@sha256:76189099f05b027785bf92413818c5c9ff339b9d347fe6f7a147cd78aef1757e&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/macleapp:24.7.T3&quot; ], &quot;sizeBytes&quot;: 826418602 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/macleapp@sha256:75795b8071ee744463f5f9d4569bb5bbdd7be0c6d628b4c7a53e7aed540c64cf&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/macleapp:24.9.0.2409101448&quot; ], &quot;sizeBytes&quot;: 826401138 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/macleapp@sha256:79339ba0083123daa25a8bf10f8e3a786aa0394e18fde8e2c220c4945efdda4d&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/macleapp:24.7.0&quot; ], &quot;sizeBytes&quot;: 825226614 &#125;, &#123; &quot;names&quot;: [ &quot;cmc.centralrepo.rnd.huawei.com/digitalpayment/lwx1171514_br_moov_corte_release/moovappserverconsumerbasic@sha256:f2d6c12333ebb80c301518d035d6b1aea82dd1616f51547dbc5ae07a3b98c0ef&quot;, &quot;cmc.centralrepo.rnd.huawei.com/digitalpayment/lwx1171514_br_moov_corte_release/moovappserverconsumerbasic:24.0.0.B010.20240710213043&quot; ], &quot;sizeBytes&quot;: 807479422 &#125;, &#123; &quot;names&quot;: [ &quot;cmc.centralrepo.rnd.huawei.com/digitalpayment/lwx1171514_br_moov_corte_release/moovappserverconsumerbasic@sha256:32738c3447b60bab4fdafa4233c5abd2d038dfc64a9795e43cf898e339def3fb&quot;, &quot;cmc.centralrepo.rnd.huawei.com/digitalpayment/lwx1171514_br_moov_corte_release/moovappserverconsumerbasic:24.0.0.B010.20240708113221&quot; ], &quot;sizeBytes&quot;: 807465394 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/settlementcenter@sha256:5c903c9c5c4af0b7cab91a9265ea0e93f53b8f38d58c39a05f3e90b9f6682161&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/settlementcenter:24.0.0.B011.20240718165148&quot; ], &quot;sizeBytes&quot;: 806987737 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/appgateway@sha256:be2bba621a388a78a2e7aa8fba0a23a5e4335550546c10efbc84b8fa877efcd8&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/appgateway:524.0.0.B001.20240628030507&quot; ], &quot;sizeBytes&quot;: 799576981 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/moovcorteappserverconsumercore@sha256:029d07ca6724d3753e7c38c08f53c6ee0d28b0161dda3292b33b5b85eb5ae2c5&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/moovcorteappserverconsumercore:524.0.T2-LCI101.B001.20240827203229&quot; ], &quot;sizeBytes&quot;: 797419459 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/appserverconsumercore@sha256:09b5c36962195d379410adda112d6e5fe1c0993c0ed370352ab90ff67edc466a&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/appserverconsumercore:524.0.0.B012.20240716194926&quot; ], &quot;sizeBytes&quot;: 796746732 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/flume@sha256:2ab0f4a9d40ee64ea6010c05d920b83e3f240a94235810945175b59c41cc7798&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/flume:24.7.0&quot; ], &quot;sizeBytes&quot;: 777623446 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/magnogallery@sha256:b1273f9bf61466b8b9ec502e179d23f054ee153da2113b3132df8c314d55644c&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/magnogallery:24.7.0&quot; ], &quot;sizeBytes&quot;: 776819393 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/magnostudio@sha256:7a6016e56bf743d6bb216b6321bbfb7c6fe2bed872a980ef81f879b9266df1c8&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/magnostudio:24.7.0&quot; ], &quot;sizeBytes&quot;: 774674569 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/websocket@sha256:747f494cf4a742d1b745ba955a97de51b16fa2f3766cf9378e0c07432c0c59d5&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/websocket:24.7.0&quot; ], &quot;sizeBytes&quot;: 754229343 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/pws@sha256:eeca389a5bcb98b765184ff203e9de890b34c3606e4f0d8a79bfd771e1a2d47a&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/pws:24.0.0.B011.20240718165148&quot; ], &quot;sizeBytes&quot;: 752032861 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/node-tasks@sha256:ef33d98d1f0c686aae7b4540ee49c8b1503d95f92ddcd77a9f9b8db9dea53ed6&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/node-tasks:24.1.0.202407151825.suse&quot; ], &quot;sizeBytes&quot;: 749531537 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/servicebroker@sha256:69f677b33365f28c4f60a7ae73cf208e9c48040963dde12351be5b18118c5bcb&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/servicebroker:24.7.0&quot; ], &quot;sizeBytes&quot;: 738954746 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/miniprogrameventrans@sha256:fd1db5e84471ee7321e7d4e32c52aea141a6819087a3af8111ec403613dd2201&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/miniprogrameventrans:24.7.0&quot; ], &quot;sizeBytes&quot;: 706154871 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/miniprogrameventstats@sha256:397af587e1efcaa706c13a395b7f35420e17470665f5894eb2c0d73feadc4c04&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/miniprogrameventstats:24.7.0&quot; ], &quot;sizeBytes&quot;: 680897128 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/appcube-prometheus@sha256:b7860fd293fabfa41ffe01df755a8ea34dd19f4bb2224167575869e8e4f26b11&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/appcube-prometheus:24.7.0&quot; ], &quot;sizeBytes&quot;: 665237777 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/appcube-ops-agent@sha256:c6f27b20a08e65a077da0dc632392c9d4928ae1071ad545f963962270478a5cb&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/appcube-ops-agent:24.7.0&quot; ], &quot;sizeBytes&quot;: 664731909 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/ingress-controller@sha256:f5daae638b0338278c0728d05a297d2bd853efd8f8bbc7128d71a494ee68086f&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/ingress-controller:24.7.0&quot; ], &quot;sizeBytes&quot;: 626608543 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/bingo@sha256:20fd075db87aaa388fd79c34282330fcbeb67477d9f5394dfa0e341449232552&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/bingo:24.7.0&quot; ], &quot;sizeBytes&quot;: 616602454 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/proxyv2@sha256:7edc6600fdae94cc0ccad7305159882ff38473144aecc812616876748611b2fc&quot; ], &quot;sizeBytes&quot;: 604221445 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/root/multus@sha256:28337aa66ae12dccb62cd417a900c173ecbe53be5af942a6627ee3664bfcb64e&quot;, &quot;7.225.7.126:20202/root/multus:v3.7.1.20240516&quot; ], &quot;sizeBytes&quot;: 602513058 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/root/flannel@sha256:76aed9351e2c79beffd0d29c4e26a46db0fbd26514415877cebf5b56532576f8&quot;, &quot;7.225.7.126:20202/root/flannel:v0.24.2.20240516&quot; ], &quot;sizeBytes&quot;: 601256097 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/f-dmax@sha256:0a45d8866fe7f5860cec782d0a9b74e619745de7438700690fcde72ece83a8d0&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/f-dmax:24.7.0&quot; ], &quot;sizeBytes&quot;: 575667906 &#125; ] &#125; &#125;, &#123; &quot;metadata&quot;: &#123; &quot;name&quot;: &quot;dynamic.7.225.4.227&quot;, &quot;uid&quot;: &quot;fe3f38c3-1a26-4d22-bfb1-1c5346f08cfd&quot;, &quot;resourceVersion&quot;: &quot;20278309&quot;, &quot;creationTimestamp&quot;: &quot;2024-06-28T02:36:27Z&quot;, &quot;labels&quot;: &#123; &quot;SITEID&quot;: &quot;1&quot;, &quot;apaas-node&quot;: &quot;apaas&quot;, &quot;app-node&quot;: &quot;app&quot;, &quot;beta.kubernetes.io/arch&quot;: &quot;amd64&quot;, &quot;beta.kubernetes.io/os&quot;: &quot;linux&quot;, &quot;digitalfoundry.ccc/createmode&quot;: &quot;dynamic&quot;, &quot;digitalfoundry/address&quot;: &quot;7.225.4.227&quot;, &quot;digitalfoundry/namespace&quot;: &quot;ns000000000000000000001&quot;, &quot;digitalfoundry/os.hostname&quot;: &quot;kwephis19631136&quot;, &quot;digitalfoundry/os.version&quot;: &quot;SUSE12_SP5&quot;, &quot;hostgroup&quot;: &quot;FinancePR&quot;, &quot;kafka-node&quot;: &quot;kafka&quot;, &quot;kubernetes.io/arch&quot;: &quot;amd64&quot;, &quot;kubernetes.io/hostname&quot;: &quot;dynamic.7.225.4.227&quot;, &quot;kubernetes.io/os&quot;: &quot;linux&quot;, &quot;mid-node&quot;: &quot;mid&quot;, &quot;payment-node&quot;: &quot;payment&quot;, &quot;supportContainer&quot;: &quot;true&quot;, &quot;zookeeper-node&quot;: &quot;zookeeper&quot; &#125;, &quot;annotations&quot;: &#123; &quot;flannel.alpha.coreos.com/backend-data&quot;: &quot;&#123;\\&quot;VNI\\&quot;:1,\\&quot;VtepMAC\\&quot;:\\&quot;ce:2b:15:a9:45:ae\\&quot;&#125;&quot;, &quot;flannel.alpha.coreos.com/backend-type&quot;: &quot;vxlan&quot;, &quot;flannel.alpha.coreos.com/kube-subnet-manager&quot;: &quot;true&quot;, &quot;flannel.alpha.coreos.com/public-ip&quot;: &quot;7.225.4.227&quot;, &quot;node.alpha.kubernetes.io/ttl&quot;: &quot;0&quot;, &quot;volumes.kubernetes.io/controller-managed-attach-detach&quot;: &quot;true&quot; &#125; &#125;, &quot;spec&quot;: &#123; &quot;podCIDR&quot;: &quot;182.10.2.0/24&quot;, &quot;podCIDRs&quot;: [ &quot;182.10.2.0/24&quot; ] &#125;, &quot;status&quot;: &#123; &quot;capacity&quot;: &#123; &quot;cpu&quot;: &quot;16&quot;, &quot;ephemeral-storage&quot;: &quot;10218772Ki&quot;, &quot;hugepages-1Gi&quot;: &quot;0&quot;, &quot;hugepages-2Mi&quot;: &quot;0&quot;, &quot;memory&quot;: &quot;65435076Ki&quot;, &quot;pods&quot;: &quot;200&quot; &#125;, &quot;allocatable&quot;: &#123; &quot;cpu&quot;: &quot;15800m&quot;, &quot;ephemeral-storage&quot;: &quot;10218772Ki&quot;, &quot;hugepages-1Gi&quot;: &quot;0&quot;, &quot;hugepages-2Mi&quot;: &quot;0&quot;, &quot;memory&quot;: &quot;65435076Ki&quot;, &quot;pods&quot;: &quot;200&quot; &#125;, &quot;conditions&quot;: [ &#123; &quot;type&quot;: &quot;NetworkUnavailable&quot;, &quot;status&quot;: &quot;False&quot;, &quot;lastHeartbeatTime&quot;: &quot;2024-06-28T02:38:24Z&quot;, &quot;lastTransitionTime&quot;: &quot;2024-06-28T02:38:24Z&quot;, &quot;reason&quot;: &quot;FlannelIsUp&quot;, &quot;message&quot;: &quot;Flannel is running on this node&quot; &#125;, &#123; &quot;type&quot;: &quot;Ready&quot;, &quot;status&quot;: &quot;True&quot;, &quot;lastHeartbeatTime&quot;: &quot;2024-09-26T11:33:59Z&quot;, &quot;lastTransitionTime&quot;: &quot;2024-06-28T02:37:56Z&quot;, &quot;reason&quot;: &quot;KubeletReady&quot;, &quot;message&quot;: &quot;kubelet is posting ready status. AppArmor enabled&quot; &#125;, &#123; &quot;type&quot;: &quot;MemoryPressure&quot;, &quot;status&quot;: &quot;False&quot;, &quot;lastHeartbeatTime&quot;: &quot;2024-09-26T11:33:59Z&quot;, &quot;lastTransitionTime&quot;: &quot;2024-06-28T02:37:56Z&quot;, &quot;reason&quot;: &quot;KubeletHasSufficientMemory&quot;, &quot;message&quot;: &quot;kubelet has sufficient memory available&quot; &#125;, &#123; &quot;type&quot;: &quot;DiskPressure&quot;, &quot;status&quot;: &quot;False&quot;, &quot;lastHeartbeatTime&quot;: &quot;2024-09-26T11:33:59Z&quot;, &quot;lastTransitionTime&quot;: &quot;2024-06-28T02:37:56Z&quot;, &quot;reason&quot;: &quot;KubeletHasNoDiskPressure&quot;, &quot;message&quot;: &quot;kubelet has no disk pressure&quot; &#125;, &#123; &quot;type&quot;: &quot;PIDPressure&quot;, &quot;status&quot;: &quot;False&quot;, &quot;lastHeartbeatTime&quot;: &quot;2024-09-26T11:33:59Z&quot;, &quot;lastTransitionTime&quot;: &quot;2024-06-28T02:37:56Z&quot;, &quot;reason&quot;: &quot;KubeletHasSufficientPID&quot;, &quot;message&quot;: &quot;kubelet has sufficient PID available&quot; &#125; ], &quot;addresses&quot;: [ &#123; &quot;type&quot;: &quot;InternalIP&quot;, &quot;address&quot;: &quot;7.225.4.227&quot; &#125;, &#123; &quot;type&quot;: &quot;Hostname&quot;, &quot;address&quot;: &quot;dynamic.7.225.4.227&quot; &#125; ], &quot;daemonEndpoints&quot;: &#123; &quot;kubeletEndpoint&quot;: &#123; &quot;Port&quot;: 10250 &#125; &#125;, &quot;nodeInfo&quot;: &#123; &quot;machineID&quot;: &quot;ab46b88e621e9bbede542d07658d4bbd&quot;, &quot;systemUUID&quot;: &quot;C6E1D97D-5A43-4579-84C0-9AD6FE082B4F&quot;, &quot;bootID&quot;: &quot;073efb15-7000-43e7-8c41-cd6cf4310758&quot;, &quot;kernelVersion&quot;: &quot;4.12.14-122.186-default&quot;, &quot;osImage&quot;: &quot;SUSE Linux Enterprise Server 12 SP5&quot;, &quot;containerRuntimeVersion&quot;: &quot;docker://20.10.25-ce&quot;, &quot;kubeletVersion&quot;: &quot;v1.25.3&quot;, &quot;kubeProxyVersion&quot;: &quot;v1.25.3&quot;, &quot;operatingSystem&quot;: &quot;linux&quot;, &quot;architecture&quot;: &quot;amd64&quot; &#125;, &quot;images&quot;: [ &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/macleserver@sha256:3278440e7bf2e7cedd41d64e7510bde819757c501a5746a2d55f67ca64234887&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/macleserver:24.7.0&quot; ], &quot;sizeBytes&quot;: 885300670 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/taskjob@sha256:460201412d4c93dc371fde9c8725edd338d4fe822097c5d4e17feabf0343cb61&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/taskjob:24.1.0.202407151825.suse&quot; ], &quot;sizeBytes&quot;: 873439494 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/dw_kafka_suse12sp5_x86@sha256:f38b74dfd4ddf95a0ac327eb22512b54e8ef8ae2826c6f4840668feeeaa4b680&quot; ], &quot;sizeBytes&quot;: 857722161 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/dw_kafka_suse12sp5_x86@sha256:5924beb1464e7049bdd5a5ee5f9d588e98d1841c546d2e46f0b54bead0105143&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/dw_kafka_suse12sp5_x86:v600r024c10&quot; ], &quot;sizeBytes&quot;: 855103207 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/appportal@sha256:c95c9eeaf1cad657b0039d388c8d486a5dda341a3f071f0bed315b5f57099e56&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/appportal:524.0.T2-LCI101.B001.20240915233632&quot; ], &quot;sizeBytes&quot;: 848714846 &#125;, &#123; &quot;names&quot;: [ &quot;cmc.centralrepo.rnd.huawei.com/digitalpayment/zwx935012_br_payment_24.0.0_release/appportal@sha256:90868ddcc7858bd6a9e1118c7348261066b8abf3b65eb9814eede61418a06954&quot;, &quot;cmc.centralrepo.rnd.huawei.com/digitalpayment/zwx935012_br_payment_24.0.0_release/appportal:24.0.0.B010.20240907203044&quot; ], &quot;sizeBytes&quot;: 848714309 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/appportal@sha256:96d1abe94816d7b2ad46567e2df37827efd6dae269017c799646921565614533&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/appportal:524.0.T1.B001.20240706220638&quot; ], &quot;sizeBytes&quot;: 848655614 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/spportal@sha256:b3a2c6d89bc7529c6fff1897695611af58219f68c0329536a018626aaa544192&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/spportal:24.0.0.B001.20240628080022&quot; ], &quot;sizeBytes&quot;: 846806905 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/spportal@sha256:d28a011faa59d3d604cb2ecfc24f91342b373e1e9c35e61b5cfaaeb36b556ff2&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/spportal:24.0.0.B011.20240718165148&quot; ], &quot;sizeBytes&quot;: 846738002 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/moovcorteappserverpartner@sha256:92c120be11601db32452c5729cbe621f6b94e0ebc4ece77ff3cb02ad477ad723&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/moovcorteappserverpartner:524.0.T3-LCI101.B001.20240924220303&quot; ], &quot;sizeBytes&quot;: 836505239 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/moovcorteappserverpartner@sha256:d94513eb33229a2c289e409d6a1cbba03e966ac06da9d70597fac54897b5a176&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/moovcorteappserverpartner:524.0.T2-LCI101.B001.20240914214451&quot; ], &quot;sizeBytes&quot;: 836501719 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/moovcorteappserverpartner@sha256:6010b958684f782c1b74bd0ba443d2d3ecc5cde5ccf612c094fa5a13a3db4d3b&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/moovcorteappserverpartner:524.0.T2-LCI101.B001.20240911172742&quot; ], &quot;sizeBytes&quot;: 836478520 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/moovcorteappserverpartner@sha256:f38365d6dc341ddac2280efda477d8ea9fb157eac166d16fc2a898829a95db4a&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/moovcorteappserverpartner:524.0.T2-LCI101.B001.20240909105302&quot; ], &quot;sizeBytes&quot;: 836475130 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/moovcorteappserverpartner@sha256:1cd03541fb14845511fead683f761f64ddf45d39c6377764d7f72e87560ef3ba&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/moovcorteappserverpartner:524.0.T2-LCI101.B001.20240905161213&quot; ], &quot;sizeBytes&quot;: 836469332 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/moovcorteappserverpartner@sha256:a5cb98bcc4672e835d0bfebb6119c6a57046006ba7ecbe2d9bcf34fb565bf629&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/moovcorteappserverpartner:524.0.T2-LCI101.B001.20240903185544&quot; ], &quot;sizeBytes&quot;: 836455423 &#125;, &#123; &quot;names&quot;: [ &quot;cmc.centralrepo.rnd.huawei.com/digitalpayment/lwx1171514_master/moovappserverpartner@sha256:72c606ea861bb6cf7f4e81f025f69f6f972285902e8b8a3c614ec9306dd20be2&quot;, &quot;cmc.centralrepo.rnd.huawei.com/digitalpayment/lwx1171514_master/moovappserverpartner:24.1.0.B001.20240904091850&quot; ], &quot;sizeBytes&quot;: 836398212 &#125;, &#123; &quot;names&quot;: [ &quot;7.225.7.126:20202/ns000000000000000000001/appserverpartner@sha256:8667ae088cccbedce7eda2644ceec4aa530ae999fde0451fb1e4b659752cf2c7&quot;, &quot;7.225.7.126:20202/ns000000000000000000001/appserverpartner:524.0.0.B012.20240716194926&quot; ], &quot;sizeBytes&quot;: 835782110 &#125;&#125; keystore—-TLS验证 1curl -kv https://xxx.com python自动化实践之实现接口自动化编排 功能：这段代码的主要功能是使用Selenium库进行网页自动化操作，包括登录、识别图片验证码、填写表单、点击按钮、拖拽操作等。同时，它还使用了OCR库进行图片识别，并使用了pyautogui库进行鼠标键盘操作。 目的：这段代码的目的是实现自动化登录、数据填写、操作等一系列复杂的网页操作，以提高工作效率。 使用场景：这段代码可以用于自动化测试、数据抓取、网页爬虫等场景。 主要逻辑： 导入所需的库，包括selenium、time、PIL、ddddocr等。 设置selenium的参数，包括窗口大小、无头模式等，以避免被服务器识别。 实例化Edge浏览器，并执行一系列的操作，包括打开网页、最大化窗口、定位元素、填写数据、点击按钮等。 使用OCR库识别图片验证码，并填写到相应的输入框。 切换语言，并进行后续的操作。 使用openpyxl库读取excel文件，并获取相关数据。 使用selenium的操作，进行一系列的网页操作，包括点击按钮、填写数据、拖拽操作等。 使用pyautogui库进行鼠标键盘操作，包括移动鼠标、点击按钮、拖拽等。 最后，保存设置，完成整个自动化操作。from selenium import webdriverfrom selenium.webdriver.common.keys import Keysfrom time import sleepfrom selenium.webdriver import ActionChainsfrom selenium.webdriver import ChromeOptionsfrom selenium.webdriver.chrome.service import Servicefrom msedge.selenium_tools import EdgeOptionsfrom msedge.selenium_tools import Edgefrom selenium.webdriver.edge.options import Optionsfrom PIL import Image, ImageDraw, ImageFontimport warningsimport ddddocrimport datetimeimport sysimport jsonimport openpyxlfrom openpyxl import load_workbookfrom openpyxl import workbookimport pyautoguiwarnings.filterwarnings(&quot;ignore&quot;, category=DeprecationWarning)# 实现让selenium规避被检测到的风险option = EdgeOptions()option.add_experimental_option(&#x27;excludeSwitches&#x27;, [&#x27;enable-logging&#x27;])option.add_experimental_option(&quot;excludeSwitches&quot;, [&#x27;enable-automation&#x27;])option.add_argument(&quot;--no-sandbox&quot;)option.add_argument(&quot;--disable-dev-shm-usage&quot;)option.add_argument(&quot;--window-size=1920,1080&quot;) # 建议设置窗口大小option.add_argument(&#x27;--headless&#x27;)option.add_argument(&#x27;--disable-gpu&#x27;)capabilities = option.to_capabilities()capabilities[&#x27;acceptSslCerts&#x27;] = Truecapabilities[&#x27;acceptInsecureCerts&#x27;] = Truebro = Edge( executable_path= &#x27;D:/users/c60038363/AppData/Local/Programs/Python/Python310/edgedriver_win64/MicrosoftWebDriver.exe&#x27;, options=option)# 去除特征识别 防止服务器识别到的selenium的特征从而阻止后续的滑动验证bro.execute_cdp_cmd( &quot;Page.addScriptToEvaluateOnNewDocument&quot;, &#123; &quot;source&quot;: &quot;&quot;&quot; Object.defineProperty(navigator, &#x27;webdriver&#x27;, &#123; get: () =&gt; undefined &#125;) &quot;&quot;&quot; &#125;)# TODO Selenium 如何直接在现有的界面（浏览器保存登录凭证）新增标签页，无需重复登录# TODO 成功进入项目管理页面使用goto语句跳转到后续操作bro.get(&#x27;https://afis.inhuawei.com/toolportal/index.html#/projectmanage&#x27;)bro.maximize_window()# 标签定位user = bro.find_element_by_id(&#x27;input-11&#x27;)pwd = bro.find_element_by_id(&#x27;input-14&#x27;)yzcode = bro.find_element_by_id(&#x27;input-17&#x27;)# 传入数据user.send_keys(&#x27;hwx176074&#x27;)sleep(1)pwd.send_keys(&#x27;Winovs12!&#x27;)sleep(1)flag = Truewhile(flag): # 实例化 ocr = ddddocr.DdddOcr() # 图片截图保存 img = bro.find_element_by_xpath(&quot;//img[1]&quot;) img.screenshot(&#x27;./image/11111.png&#x27;) # 打开图片 with open(r&#x27;image\\11111.png&#x27;, &#x27;rb&#x27;) as f: # 读取图片 img_bytes = f.read() # 识别 res = ocr.classification(img_bytes) yzcode.send_keys(res) sleep(1) # 点击确定登录 ok = bro.find_element_by_xpath(&#x27;//button[1]&#x27;) ok.click() sleep(4) # 切换中文 try: bro.find_element_by_xpath(&quot;//div[text()=&#x27;Project Management&#x27;]&quot;) except: print(&quot;login faild, try again&quot;) else: flag = False # 登录成功后弹出提示框选择是否继续 confirm = pyautogui.confirm(text=&quot;continue?&quot;,title=&quot;tip&quot;) print(confirm) if(confirm!=&#x27;Cancel&#x27;): # 切换中文 lang = bro.find_element_by_xpath(&quot;//button[1]&quot;) lang.click() chnLang = bro.find_element_by_class_name(&quot;v-list-item-title&quot;) chnLang.click() sleep(2) # 后续为 # TODO projectid并不能写死 跳转到指定url(或新建标签页新建) bro.get( &quot;https://afis.inhuawei.com/toolportal/index.html#/apitool/assistant/apimanage?projectid=3e78ca7fffcd464fa34b8f1a97e4cc2b&quot; ) sleep(6) file = load_workbook(&#x27;Fabric_ApiList.xlsx&#x27;) actSheet = file.active constSheet = file[&#x27;Const&#x27;] catalogItem = actSheet.cell(2, 2).value apiName = actSheet.cell(2, 3).value path = actSheet.cell(2, 4).value print(catalogItem) # TODO 目录名需要实现灵活处理、如果该目录名不存在怎新建 chooseCatalog = bro.find_element_by_xpath(&quot;//div[text()=&#x27;&quot; + catalogItem + &quot;&#x27;]&quot;) chooseCatalog.click() sleep(1) bro.find_element_by_xpath(&quot;//span[text()=&#x27; 创建&#x27;]&quot;).click() sleep(3) # TODO 接口名称 bro.find_element_by_xpath(&quot;//input[1]&quot;).send_keys(apiName) bro.find_element_by_xpath(&quot;//span[text()=&#x27;下一步&#x27;]&quot;).click() sleep(3) bro.find_element_by_xpath( &quot;(//div[@class=&#x27;v-list-item-media add_button&#x27;])[1]&quot;).click() sleep(1) # TODO 接口路径 bro.find_element_by_xpath( &quot;(//div[@class=&#x27;v-field__field&#x27;])[5]/input[1]&quot;).send_keys(path) bro.find_element_by_xpath( &quot;(//span[@class=&#x27;el-checkbox__label&#x27;])[18]&quot;).click() bro.find_element_by_xpath( &quot;//button[@class=&#x27;el-button el-button--primary&#x27;]&quot;).click() sleep(2) bro.find_element_by_xpath( &quot;//button[@class=&#x27;el-button add-item-btn add_request_btn mt-3&#x27;]/span[text()=&#x27;添加&#x27;]&quot; ).click() sleep(1) # 新增json生成请求体 bro.find_element_by_xpath( &quot;(//button[@class=&#x27;el-button el-button--primary is-link&#x27;])[3]&quot;).click( ) sleep(1) # TODO json需要读取文件，后续结合excel jsonDataIn = actSheet.cell(2, 6).value jsonDataOut = actSheet.cell(2, 7).value # reqJson = json.dumps(jsonDataIn) # respJson = json.dumps(jsonDataOut) print(jsonDataIn) # textarea的传值 bro.find_element_by_xpath(&quot;//textarea[1]&quot;).send_keys(jsonDataIn) # ActionChains(bro).move_by_offset(1197, 675).click().send_keys(Keys().BACKSPACE).perform() bro.find_element_by_xpath( &quot;(//button[@class=&#x27;el-button el-button--primary&#x27;])[1]&quot;).click() sleep(1) bro.find_element_by_xpath( &quot;//button[@class=&#x27;v-btn v-theme--light v-btn--density-default v-btn--size-default v-btn--variant-outlined add-group-btn add_request_btn&#x27;]/span[3]&quot; ).click() bro.find_element_by_xpath( &quot;(//button[@class=&#x27;el-button el-button--primary is-link&#x27;])[27]&quot;).click( ) bro.find_element_by_xpath(&quot;//textarea[1]&quot;).send_keys(jsonDataOut) bro.find_element_by_xpath( &quot;(//button[@class=&#x27;el-button el-button--primary&#x27;])[1]&quot;).click() sleep(1) bro.find_element_by_xpath( &quot;//button[@class=&#x27;v-btn v-theme--light v-btn--density-default v-btn--size-default v-btn--variant-tonal&#x27;]&quot; ).click() sleep(2) bro.find_element_by_xpath( &quot;//button[@class=&#x27;v-btn v-theme--light v-btn--density-default v-btn--size-default v-btn--variant-tonal&#x27;]&quot; ).click() sleep(2) # TODO 选择接口进入开发api环节 bro.find_element_by_xpath(&quot;//a[text()=&#x27;&quot; + apiName + &quot;&#x27;]&quot;).click() sleep(1) bro.find_element_by_xpath(&quot;//span[text()=&#x27;下一步&#x27;]&quot;).click() sleep(5) soap = bro.find_element_by_xpath(&quot;//img[contains(@src,&#x27;soap&#x27;)]&quot;) ActionChains(bro).move_by_offset(1191, 400).click().pause(1).send_keys( Keys().DELETE).perform() ActionChains(bro).drag_and_drop_by_offset(soap, 795, -90).perform() sleep(1) # TODO 如何连线 # ActionChains(bro).move_by_offset(0, -192).click_and_hold().move_by_offset( # 0, 158).release().perform() # ActionChains(bro).move_by_offset(0, 64).click_and_hold().move_by_offset( # 0, 247).release().perform() pyautogui.moveTo(x=1191, y=389) pyautogui.dragTo(x=1191, y=550, duration=0.5, button=&quot;left&quot;) pyautogui.moveTo(x=1191, y=615) pyautogui.dragTo(x=1191, y=862, duration=0.5, button=&quot;left&quot;) pyautogui.click(x=1191, y=580, clicks=2) sleep(1) # TODO 选择端点服务 servicename = bro.find_element_by_xpath( &quot;(//div[@class=&#x27;v-field__input&#x27;])[1]/input&quot;) servicename.send_keys(actSheet.cell(2, 8).value) sleep(1) ActionChains(bro).move_to_element_with_offset(servicename, 0, 45).click().perform() sleep(2) method = bro.find_element_by_xpath( &quot;(//div[@class=&#x27;v-field__input&#x27;])[2]/input&quot;) method.send_keys(actSheet.cell(2, 9).value) sleep(5) ActionChains(bro).move_to_element_with_offset(method, 0, 50).click().perform() sleep(1) # TODO 图元节点名称不一定都是37 bro.find_element_by_xpath( &quot;//div[@id=&#x27;dist_soapode37_SyncAPIRequest_reqBody&#x27;]/div[1]/span[2]/i&quot; ).click() bro.find_element_by_xpath( &quot;//div[@id=&#x27;dist_soapode37_SyncAPIRequest_reqBody-Request&#x27;]/div[1]/span[2]/i&quot; ).click() bro.find_element_by_xpath( &quot;//div[@id=&#x27;dist_soapode37_SyncAPIRequest_reqBody-Request-Header&#x27;]/div[1]/span[2]/i&quot; ).click() bro.find_element_by_xpath( &quot;//div[@id=&#x27;dist_soapode37_SyncAPIRequest_reqBody-Request-Header-Caller&#x27;]/div[1]/span[2]/i&quot; ).click() # 开始填写header的值 bro.find_element_by_xpath( &quot;(//input[@class=&#x27;v-field__input&#x27;])[9]&quot;).send_keys( constSheet.cell(2, 1).value) bro.find_element_by_xpath( &quot;(//input[@class=&#x27;v-field__input&#x27;])[10]&quot;).send_keys( actSheet.cell(2, 10).value) bro.find_element_by_xpath( &quot;(//input[@class=&#x27;v-field__input&#x27;])[12]&quot;).send_keys( constSheet.cell(2, 2).value) bro.find_element_by_xpath( &quot;(//input[@class=&#x27;v-field__input&#x27;])[15]&quot;).send_keys( constSheet.cell(2, 3).value) bro.find_element_by_xpath( &quot;(//input[@class=&#x27;v-field__input&#x27;])[16]&quot;).send_keys( constSheet.cell(2, 4).value) bro.find_element_by_xpath( &quot;(//input[@class=&#x27;v-field__input&#x27;])[17]&quot;).send_keys( constSheet.cell(2, 5).value) bro.find_element_by_xpath( &quot;(//input[@class=&#x27;v-field__input&#x27;])[20]&quot;).send_keys( constSheet.cell(2, 6).value) bro.find_element_by_xpath( &quot;(//input[@class=&#x27;v-field__input&#x27;])[22]&quot;).send_keys( constSheet.cell(2, 7).value) bro.find_element_by_xpath( &quot;(//input[@class=&#x27;v-field__input&#x27;])[23]&quot;).send_keys( constSheet.cell(2, 8).value) # ActionChains(bro).move_to_element_with_offset(Version, 450, 0).click().perform() bro.find_element_by_xpath(&quot;//span[text()=&#x27;下一步&#x27;]&quot;).click() sleep(2) # 开始保存设置 pyautogui.click(x=322, y=483) bro.find_element_by_xpath(&quot;//span[text()=&#x27;下一步&#x27;]&quot;).click() sleep(1) bro.find_element_by_xpath( &quot;//button[@class=&#x27;el-button el-button--primary&#x27;]&quot;).click() sleep(3) bro.find_element_by_xpath(&quot;//span[text()=&#x27;完成&#x27;]&quot;).click() sys.exit(0) print(&quot;ending&quot;) exit(0) 资料参考pip更新报错更换可用镜像仓库 下载chromedriver selenium的DeprecationWarning报错解决方案 urllib3和selenium版本冲突 Selenium使用Edge打开网页出现“你的连接不是专用连接xxx”解决方案 图形验证码的识别方案 pageobject自动化测试 ocr识别–验证码 tesseract如何解决ocr无法识别彩色图形码 tesseract-ocr识别踩坑 pillow–PIL图片操作 ddddocr识别方案–url2 selenium获取元素的方式案例说明 selenium Xpath获取元素介绍–超全selenium元素定位XPath、CS 如何通过python+selenium选取canvas标签的元素 无法读取元素问题分析 selenium跳转页面交互相关 selenium实现canvas操作 canvas绘图 selenium的鼠标操作 xpath定位细节 selenium 操作textarea文本框 python字符串引号前面的字母修饰符作用(r, u, f, b) js中字符串使用单引号还是双引号–ES6语法 JS 获取标签的方法【全】 python怎么将json转成字符串 xpath获取匹配到的第二个元素 selenium之鼠标操作详解 selenium键盘操作 搭建个人网站指导 输入框验证样式 输入框样式 selenium下载到本地 pyautogui弹出系统提示框操作 pyautogui最全操作方法 初识计算机视觉之 opencv-python numpy库学习 填写文本到系统剪贴板配合pyautogui自动化操作 Python图像识别与自动点击应用 本文将介绍如何使用Python实现图像识别和自动点击功能。我们将使用OpenCV和Pillow库来处理图像，并使用PyAutoGUI库来模拟鼠标操作。 提高pyautogui效率的实践 opencv的模板匹配原理 opencv匹配详解 图片的深度 ddddocr 欢迎使用ddddocr，本项目专注带动行业内卷，个人博客:wenanzhe.com训练数据支持来源于:http://146.56.204.113:19199/preview爬虫框架feapder可快速一键接入，快速开启爬虫之旅：https://github.com/Boris-code/feapder谷歌reCaptcha验证码 &#x2F; hCaptcha验证码 &#x2F; funCaptcha验证码商业级识别接口：https://yescaptcha.com/i/NSwk7i TODO LIST 网线 壳发黄 磨砂贴纸 安装环境（watt toolkit 加速器 \\ idea \\ jre \\ python \\）postman\\mockoon\\winscp\\xshell\\ps\\lr OBS开始录屏 搭建服务器环境 LR 写个自动登录的python脚本 flex布局 能否canvas中的图形 cursor 通过git lfs上传大文件到github node.js安装 npm和nodejs什么关系 数位笔和电容笔 spotify注册 锻炼plan，周一到周六，多少组 周末plan，一天五顿 制定打卡计划，有视频窗格 直播按键显示插件 调酒 支架 假电池直播 直播伴侣 HDMI连接相机电脑推流 视频采集卡 如何第二台电脑画面推到第一台电脑直播画面 【python–教程】pyautogui图形自动化，击败重复性办公任务。 国内npm源镜像（npm加速下载） 指定npm镜像 Python3 goto 语句的使用 将图片转字节流保存 MM相关业务阅读沉淀 MM系统数据库模型 鸿蒙开发 opencv库 &gt; pip install opencv-python 照片水印操作 python中的self用法详解 下载MobaXterm python的封装实现 把旧电脑文件上传Github,准备重装双系统 把安装双系统的过程总结下，然后总结成功安装Ubuntu系统后开放ssh给另一台windows电脑远程调用shell 远程debug怎么实现 搭建个人网站 美化主页 Linux文件系统目录接口 CPU超频？内存超频？什么时候需要？ 1&gt;0&gt;0.5&gt;0.8&gt;0.1 123456789101112131415161718192021import cv2import numpy as npfrom PIL import Imageimg= cv2.imread(&#x27;image/process_fabric.png&#x27;)# imgbytes = cv2.imencode(&quot;.png&quot;, img)[1].tobytes()# print(type(imgbytes))imgbytes= bytes(&#x27;&#x27;)imgcopy = cv2.imdecode(np.frombuffer(imgbytes, dtype=np.uint8), 1)print(type(imgcopy))# print(imgcopy)cv2.imwrite(&quot;fabbycv.png&quot;, imgcopy)# cv2.imwrite(&#x27;fab&#x27;, imgcopy)# Image.fromarray(imgcopy).save(&quot;ffffab.png&quot;) FS: File Services LB: Load Balancer SWA: SP Web Application OWA: Organization Web Application AAS: Archiving Application Services RCS: Remote Cache Service BCS: Backend Core Services SR: Service Registration AG: Access Gateway SSO: Single Sign On MQ: Message Queue BTS: Bulk Task Scheduler HSM: Hardware Security Module MDF: Market Data Feed DE: Data Extractor LSS: Light Storage System SOE: Service Orchestration Entity SME: Storage Manage Entity FEPAG: Front End Processor Access Gateway 引入opencv对图像识别匹配再点击1234567891011121314151617181920212223242526272829303132333435363738import cv2import pyautoguiimport timeimport numpypyautogui.hotkey(&#x27;win&#x27;, &#x27;e&#x27;)time.sleep(1)# 截图存储到当前路径文件名为tempalte.png# img = pyautogui.screenshot(&#x27;tempalte.png&#x27;)img = pyautogui.screenshot()img.save(&#x27;D:\\practice_spider\\image\\computer.png&#x27;)# template代表要匹配搜索的内容小于源图像template = cv2.imread(&#x27;d:\\practice_spider\\image\\\\templat.png&#x27;)size = template.shapeprint(size)h, w = size[0], size[1]resource = cv2.imread(&#x27;d:\\practice_spider\\image\\computer.png&#x27;)gray = cv2.cvtColor(resource, cv2.COLOR_BGR2RGB)m = cv2.matchTemplate(gray, template, cv2.TM_CCOEFF_NORMED)print(type(m))min_max = cv2.minMaxLoc(m)print(type(min_max))print(min_max)# 根据matchTemplate的匹配方法（第三个参数）取tuple的值matchLoc = min_max[3]print(matchLoc)# print(type(loc))# 匹配到的对象左上角坐标x, y = matchLoc[0], matchLoc[1]pyautogui.click(x + w / 2, y + h / 3) 外发配置 消息如何进入AG AG网元是部署在tomcat上的，首先简单介绍下Tomcat的几个核心组件如何确定请求由谁处理 服务器组件Server： Server提供了Tomcat的生命周期管理的逻辑，它使用了一种优雅的方式来启动/关闭整个系统，不需要再对连接器和容器分别启动/关闭。 当服务器组件启动的时候，它会启动其中的所有的组件（连接器和容器），然后就开始无限期的等待关闭命令。如果需要关闭系统，可以向指定端口发送一条关闭命令，服务器组件在收到关闭命令后，会关闭其中所有的组件。 服务组件Service： 服务器组件使用了服务组件Serivce来包含其它的组件，服务组件主要包含两部分：连接器和容器，这两部分也是Tomcat容器的核心组件。 连接器Connector： Connector的主要职责就是负责接收客户端连接和客户端请求的处理加工。每个Connector都将指定一个端口进行监听，分别负责对请求报文的解析和响应报文组装，解析过程生成Request对象，而组装过程涉及Response对象。 容器Container： Tomcat容器中的Container的主要功能就是处理连接器Connector解析的到的Request，调用对应的servlet方法，将响应写入Response中。此外Tomcat还对容器添加了管道和域的概念，用于对请求进行预处理。Tomcat中的容器分为四大类，按照包含关系依次为：Engin容器、Host容器、Context容器和Wrapper容器。 核心组件的关联： 1）Server元素在最顶层，代表整个Tomcat容器；一个Server元素中可以有一个或多个Service元素。 2）Service在Connector和Engine外面包了一层，把它们组装在一起，对外提供服务。一个Service可以包含多个Connector，但是只能包含一个Engine； Connector接收请求，Engine处理请求。 3）Engine、Host和Context都是容器，且 Engine包含Host，Host包含Context。每个Host组件代表Engine中的一个虚拟主机；每个Context组件代表在特定Host上运行的一个Web应用。 封装opencv识别 12345678910111213141516171819202122import cv2import pyautoguiimport timeimport numpyclass opencvUtils: def getLocation(templateImg,sourceImg): # template代表要匹配搜索的内容小于源图像 template = cv2.imread(templateImg) size = template.shape h, w = size[0], size[1] resource = cv2.imread(sourceImg) gray = cv2.cvtColor(resource, cv2.COLOR_BGR2RGB) m = cv2.matchTemplate(gray, template, cv2.TM_CCOEFF_NORMED) min_max = cv2.minMaxLoc(m) # 根据matchTemplate的匹配方法（第三个参数）取tuple的值 matchLoc = min_max[3] # print(type(loc)) # 匹配到的对象左上角坐标 x, y = matchLoc[0], matchLoc[1] return x+w/2,y+h/2 11","categories":[],"tags":[]}],"categories":[],"tags":[]}